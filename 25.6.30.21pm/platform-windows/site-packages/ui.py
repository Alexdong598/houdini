import importlib
import sys
from PySide2 import QtWidgets, QtCore, QtGui
import os
import ast
import json
import traceback
from datetime import datetime

# --- DCC Integration ---
CURRENT_DCC = os.environ.get("DY_DCC")
try:
    if CURRENT_DCC == "Houdini":
        import hou
    elif CURRENT_DCC == "Maya":
        import maya.cmds as cmds
except ImportError as e:
    print(f"Warning: Could not import libraries for {CURRENT_DCC}: {e}")

# --- ShotGrid Connection ---
try:
    from sg_register import login_to_shotgun
except ImportError:
    def login_to_shotgun():
        print("WARNING: 'sg_register.py' not found. ShotGrid connection will be mocked.")
        return None

# --- Custom Thumbnail Widget ---
class CustomThumbnailWidget(QtWidgets.QFrame):
    clicked = QtCore.Signal(QtWidgets.QWidget)
    def __init__(self, version_data, thumbnail_size, parent=None):
        super(CustomThumbnailWidget, self).__init__(parent)
        self.parent_ui = parent
        self.version_data = version_data
        self.thumbnail_size = thumbnail_size
        self.is_selected = False; self.hovered = False; self.is_dragging = False
        self.mouse_press_pos = None
        self.setMouseTracking(True); self.setAttribute(QtCore.Qt.WA_Hover)
        self.setFrameShape(QtWidgets.QFrame.Box); self.setFrameShadow(QtWidgets.QFrame.Raised)
        self.setLineWidth(1); self.setCursor(QtCore.Qt.PointingHandCursor)
        self.setAcceptDrops(True)
        self._setup_ui()
        self._update_style()

    def _setup_ui(self):
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5); layout.setSpacing(2)
        self.thumb_label = QtWidgets.QLabel()
        self.thumb_label.setFixedSize(*self.thumbnail_size)
        self.thumb_label.setAlignment(QtCore.Qt.AlignCenter)
        image_path = self.version_data.get('image_path')
        if image_path and os.path.exists(image_path):
            pixmap = QtGui.QPixmap(image_path)
            if not pixmap.isNull(): self.thumb_label.setPixmap(pixmap.scaled(self.thumb_label.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
            else: self.thumb_label.setText("No Image")
        else: self.thumb_label.setText("No Image")
        self.name_label = QtWidgets.QLabel(self.version_data.get('code', 'N/A'))
        self.name_label.setAlignment(QtCore.Qt.AlignCenter); self.name_label.setWordWrap(True); self.name_label.setToolTip(self.version_data.get('code', 'N/A'))
        layout.addWidget(self.thumb_label); layout.addWidget(self.name_label)

    def set_selected(self, selected: bool):
        self.is_selected = selected; self._update_style()

    def enterEvent(self, event: QtCore.QEvent):
        self.hovered = True; self._update_style(); super(CustomThumbnailWidget, self).enterEvent(event)

    def leaveEvent(self, event: QtCore.QEvent):
        self.hovered = False; self._update_style(); super(CustomThumbnailWidget, self).leaveEvent(event)

    def _update_style(self):
        if self.is_dragging: self.setStyleSheet("CustomThumbnailWidget{border:2px solid #4CAF50;background-color:#4a4a4a}QLabel{background-color:transparent;color:#cccccc}")
        elif self.is_selected: self.setStyleSheet("CustomThumbnailWidget{border:2px solid #427ab3;background-color:#404040}QLabel{background-color:transparent;color:#ffffff}")
        elif self.hovered: self.setStyleSheet("CustomThumbnailWidget{border:1px solid #777777;background-color:#3a3a3a}QLabel{background-color:transparent;color:#cccccc}")
        else: self.setStyleSheet("CustomThumbnailWidget{border:1px solid #555;background-color:#2a2a2a}QLabel{background-color:transparent;color:#cccccc}")

    def mousePressEvent(self, event: QtGui.QMouseEvent):
        if event.button() == QtCore.Qt.LeftButton:
            self.clicked.emit(self)
            self.mouse_press_pos = event.pos()
        super(CustomThumbnailWidget, self).mousePressEvent(event)

    def mouseMoveEvent(self, event: QtGui.QMouseEvent):
        if event.buttons() & QtCore.Qt.LeftButton and self.mouse_press_pos:
            if (event.pos() - self.mouse_press_pos).manhattanLength() >= QtWidgets.QApplication.startDragDistance():
                self._start_drag()
                self.mouse_press_pos = None
        super(CustomThumbnailWidget, self).mouseMoveEvent(event)

    def mouseReleaseEvent(self, event: QtGui.QMouseEvent):
        self.mouse_press_pos = None
        super(CustomThumbnailWidget, self).mouseReleaseEvent(event)

    def _start_drag(self):
        self.parent_ui.update_drag_info()
        drag_data = self.parent_ui.get_current_drag_data()

        if not drag_data.get('file_path') or drag_data.get('file_path') == "N/A":
            print(f"No valid file path for version {drag_data.get('version_name')}. Aborting drag.")
            return

        drag = QtGui.QDrag(self)
        mime_data = QtCore.QMimeData()
        file_path = drag_data['file_path']

        # For both Houdini and other DCCs, we now use the standard URL-based drag.
        # Houdini's externaldragdrop.py will pick this up as a file drop.
        url = QtCore.QUrl.fromLocalFile(file_path)
        mime_data.setUrls([url])

        # For Maya, we still add the specific python script for shelf drops.
        if CURRENT_DCC == "Maya":
            script = self.generate_maya_drop_script(drag_data)
            mime_data.setText(script)

        drag.setMimeData(mime_data)
        
        try:
            self.is_dragging = True
            self._update_style()
            drag.exec_(QtCore.Qt.CopyAction)
        finally:
            self.is_dragging = False
            self._update_style()

    # The generate_houdini_drop_script method is no longer needed and has been removed.

    def generate_maya_drop_script(self, data):
        json_data = json.dumps(data)
        python_command = f"""
import json; import maya.cmds as cmds;
try:
    data = json.loads('{json_data}'); file_path = data.get('file_path',''); file_format = data.get('format','')
    if file_format in ('usda','usdc', 'usd'):
        if not cmds.pluginInfo('mayaUsdPlugin',q=True,l=True): cmds.loadPlugin('mayaUsdPlugin')
        cmds.file(file_path, i=True, type='USD Import', options='-primPath / -readAnimData true');
    elif file_format == 'abc':
        if not cmds.pluginInfo('AbcImport',q=True,l=True): cmds.loadPlugin('AbcImport')
        cmds.AbcImport(file_path, mode='import');
    elif file_format in ('ma','mb'):
        cmds.file(file_path, i=True, ignoreVersion=True, groupReference=True, groupName=data.get('version_name', 'imported_asset'));
    elif file_format == 'bgeo.sc':
        cmds.error('Maya does not support the .bgeo.sc file format.');
    else:
        cmds.warning(f"Unsupported file format for Maya import: {{file_format}}");
except Exception as e:
    cmds.error(f"Failed to import file via drag-and-drop: {{e}}");
"""
        return f'python("{python_command.replace(chr(10), "").replace(chr(34), chr(92)+chr(34))}");'

# --- Hot-Reloading Logic ---
DEPENDENT_MODULE_NAMES = ["shotgun_data_manager", "sg_register"]
def execute():
    app = QtWidgets.QApplication.instance()
    if not app: app = QtWidgets.QApplication(sys.argv)
    for widget in app.allWidgets():
        if widget.objectName() == "shotgunLibraryUI_unique":
            print("Closing existing Shotgun Library UI instance.")
            widget.close()
    for name in DEPENDENT_MODULE_NAMES:
        if name in sys.modules: importlib.reload(sys.modules[name])
    if __name__ in sys.modules: importlib.reload(sys.modules[__name__])
    window = sys.modules[__name__].ShotgunLibraryUI()
    window.show()
    return window

# --- Helper Function ---
def get_main_host_window():
    try:
        import hou
        return hou.ui.mainQtWindow()
    except ImportError:
        try:
            from shiboken2 import wrapInstance
            import maya.OpenMayaUI as omui
            main_window_ptr = omui.MQtUtil.mainWindow()
            if main_window_ptr is not None:
                return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)
        except (ImportError, AttributeError): pass
    return None

# --- Main UI Class ---
class ShotgunLibraryUI(QtWidgets.QWidget):
    ASSET_TYPES = ["mdl", "shd", "rig", "txt", "cgfx-setup", "cncpt"]
    SHOT_TYPES = ["anim", "cgfx", "comp", "layout", "lgt", "mm", "matp", "paint", "roto"]
    HAL_CATEGORY_TYPES = ["cgfx", "characters", "environments", "props", "vehicles"]
    THUMB_SIZES = [(80, 60), (100, 75), (120, 90), (160, 120), (200, 150), (240, 180)]
    DEFAULT_THUMB_SIZE_INDEX = 2

    def __init__(self):
        parent_window = get_main_host_window()
        super(ShotgunLibraryUI, self).__init__(parent_window)
        # Using a unique object name is good practice
        self.setObjectName("shotgunLibraryUI_unique")
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        if parent_window: self.setWindowFlags(self.windowFlags() | QtCore.Qt.Tool)
        self.setWindowTitle("Shotgun Library")
        self.resize(1200, 800)
        self.all_versions_for_context = []
        self.current_thumbnail_size = self.THUMB_SIZES[self.DEFAULT_THUMB_SIZE_INDEX]
        self.currently_selected_widget = None
        self.sg = None
        self.project_info = {'name': 'N/A', 'id': 'N/A'}
        self.current_drag_data = {}
        self._initialize_shotgun_connection()
        try:
            from shotgun_data_manager import ShotgunDataManager
            self.data_manager = ShotgunDataManager()
        except (ImportError, Exception) as e:
            print(f"Error initializing ShotgunDataManager: {e}. Using DummyDataManager.")
            class DummyDataManager:
                def find_files(self, tab_context=""): return []
            self.data_manager = DummyDataManager()
        self.dynamic_tab_content_cache = {}
        self.setup_ui()
        self._update_bottom_tabs(self.top_tab_bar.currentIndex())

    # This metaObject().className() is used by externaldragdrop.py to find this UI.
    # It will return "ShotgunLibraryUI".
    def metaObject(self):
        return super(ShotgunLibraryUI, self).metaObject()

    def get_current_drag_data(self):
        return self.current_drag_data
        
    def update_drag_info(self):
        self.current_drag_data = {
            'version_name': self.material_combo.currentText(),
            'file_path': self.file_path_label.text(),
            'format': self.render_combo.currentText(),
            'dcc': CURRENT_DCC,
            'houdini_usd_import_method': self.houdini_usd_combo.currentText().split('::')[0] if self.houdini_usd_combo.isVisible() else 'sublayer'
        }
        
    def _initialize_shotgun_connection(self):
        project_name = os.environ.get("HAL_PROJECT")
        if not project_name: print("ERROR: HAL_PROJECT environment variable not set."); return
        self.project_info['name'] = project_name
        try:
            self.sg = login_to_shotgun()
            if self.sg:
                project_entity = self.sg.find_one("Project", [["name", "is", project_name]], ["id"])
                if project_entity: self.project_info['id'] = project_entity['id']
                else: print(f"ERROR: Could not find a project named '{project_name}' in ShotGrid.")
            else: print("ERROR: Failed to get a valid ShotGrid connection.")
        except Exception as e: print(f"An error occurred during ShotGrid initialization: {e}"); traceback.print_exc()
        
    def _apply_custom_styles(self):
        top_tab_bar_style="""QTabBar::tab{background-color:#3c3c3c;color:#cccccc;padding:5px 20px;border:1px solid #555555;border-bottom:none;border-top-left-radius:5px;border-top-right-radius:5px}QTabBar::tab:hover{background-color:#4a4a4a;color:#ffffff}QTabBar::tab:selected{background-color:rgb(66,122,179);color:#ffffff;border-color:rgb(66,122,179)}"""
        bottom_tab_widget_style="""QTabWidget::pane{border:1px solid #555555;background-color:#2a2a2a}QTabBar::tab{background-color:#3c3c3c;color:#cccccc;padding:3px 12px;border:1px solid #555555;border-bottom:none;border-top-left-radius:4px;border-top-right-radius:4px}QTabBar::tab:hover{background-color:#4a4a4a;color:#ffffff}QTabBar::tab:selected{background-color:rgb(66,122,179);color:#ffffff;border-color:rgb(66,122,179);border-bottom:1px solid #2a2a2a}"""
        self.top_tab_bar.setStyleSheet(top_tab_bar_style); self.bottom_tab_widget.setStyleSheet(bottom_tab_widget_style)
        button_style="""QPushButton{background-color:rgb(62,176,80);color:white;border:none;padding:3px 16px;border-radius:4px}QPushButton:hover{background-color:rgb(66,179,136)}QPushButton:pressed{background-color:#3e8e41}"""
        self.refresh_btn.setStyleSheet(button_style); self.toggle_layout_btn.setStyleSheet(button_style); self.cancel_selection_btn.setStyleSheet(button_style)
        self.close_btn.setStyleSheet("""QPushButton{background-color:rgb(163,39,50);color:white;border:none;padding:3px 16px;border-radius:4px}QPushButton:hover{background-color:rgb(176,44,55)}QPushButton:pressed{background-color:rgb(102,24,31)}""")
        
    def setup_ui(self):
        self.top_level_layout=QtWidgets.QHBoxLayout(self);self.main_splitter=QtWidgets.QSplitter(QtCore.Qt.Horizontal,self);self.top_level_layout.addWidget(self.main_splitter);self.left_panel_widget=QtWidgets.QWidget();self.left_panel_v_layout=QtWidgets.QVBoxLayout(self.left_panel_widget);self.top_tab_bar=QtWidgets.QTabBar();self.top_tab_bar.addTab("Assets");self.top_tab_bar.addTab("Shots");self.bottom_tab_widget=QtWidgets.QTabWidget();controls_layout=QtWidgets.QHBoxLayout();self.refresh_btn=QtWidgets.QPushButton("Refresh");self.toggle_layout_btn=QtWidgets.QPushButton("切换布局");self.cancel_selection_btn=QtWidgets.QPushButton("取消选择");self.close_btn=QtWidgets.QPushButton("Close");controls_layout.addWidget(self.refresh_btn);controls_layout.addWidget(self.toggle_layout_btn);controls_layout.addWidget(self.cancel_selection_btn);controls_layout.addStretch();controls_layout.addWidget(self.close_btn);self.left_panel_v_layout.addWidget(self.top_tab_bar);self.left_panel_v_layout.addWidget(self.bottom_tab_widget,1);self.left_panel_v_layout.addLayout(controls_layout);self.main_splitter.addWidget(self.left_panel_widget);self.options_widget=QtWidgets.QWidget();self.setup_options_panel(self.options_widget);self.main_splitter.addWidget(self.options_widget);self.main_splitter.setSizes([800,400]);self.top_tab_bar.currentChanged.connect(self._update_bottom_tabs);self.close_btn.clicked.connect(self.close);self.refresh_btn.clicked.connect(self._handle_refresh);self.toggle_layout_btn.clicked.connect(self._toggle_layout_orientation);self.cancel_selection_btn.clicked.connect(self._handle_cancel_selection);self._apply_custom_styles()
        
    def _handle_refresh(self):
        try:
            self._handle_cancel_selection()
            context_parts=[]; current_widget = self.bottom_tab_widget
            while isinstance(current_widget, QtWidgets.QTabWidget):
                if current_widget.count() == 0: break
                context_parts.append(current_widget.tabText(current_widget.currentIndex()))
                current_widget = current_widget.currentWidget()
            is_shot_context = self.top_tab_bar.currentIndex() == 1; versions = []
            if is_shot_context and len(context_parts) >= 2:
                query_context_for_dm = "/".join(context_parts[:2]); all_versions_for_sequence = self.data_manager.find_files(query_context_for_dm)
                if len(context_parts) > 2:
                    sequence_name, short_shot_name = context_parts[1], context_parts[2]; full_shot_name_to_filter = f"{sequence_name}_{short_shot_name}"
                    for version in all_versions_for_sequence:
                        entity = version.get('entity')
                        if entity and entity.get('type') == 'Shot' and entity.get('name') == full_shot_name_to_filter: versions.append(version)
                else: versions = all_versions_for_sequence
            else:
                query_context = "/".join(context_parts); versions = self.data_manager.find_files(query_context)
            processed_versions=[]
            for v in versions:
                paths = v.get('sg_path_to_geometry')
                if isinstance(paths, str):
                    clean_path = paths.strip()
                    if clean_path.startswith('[') and clean_path.endswith(']'):
                        try: v['sg_path_to_geometry'] = ast.literal_eval(clean_path)
                        except (ValueError, SyntaxError): v['sg_path_to_geometry'] = [paths]
                    else: v['sg_path_to_geometry'] = [paths]
                elif not isinstance(paths, list): v['sg_path_to_geometry'] = []
                v['project']=self.project_info; processed_versions.append(v)
            self.all_versions_for_context = processed_versions; self.name_filter_edit.setText(""); self._apply_filters()
        except Exception as e:print(f"Refresh failed: {e}");traceback.print_exc()
        
    def _update_bottom_tabs(self, index):
        while self.bottom_tab_widget.count()>0:self.bottom_tab_widget.removeTab(0)
        if index==0:
            for tab_name in self.ASSET_TYPES:
                if tab_name not in self.dynamic_tab_content_cache:self.dynamic_tab_content_cache[tab_name]=self._create_main_tab_content_widget(tab_name)
                self.bottom_tab_widget.addTab(self.dynamic_tab_content_cache[tab_name],tab_name)
        else:self._create_shot_structure_tabs()
        self._handle_refresh()
        
    def _create_shot_structure_tabs(self):
        seq_codes,shots_codes_nested=self._analyze_shotgun_data_from_env()
        for shot_type in self.SHOT_TYPES:
            seq_tabs=QtWidgets.QTabWidget();self.bottom_tab_widget.addTab(seq_tabs,shot_type)
            if not seq_codes:seq_tabs.addTab(QtWidgets.QLabel("No sequences in env."),"No Sequences");continue
            for i,seq in enumerate(seq_codes):
                shot_tabs=QtWidgets.QTabWidget();seq_tabs.addTab(shot_tabs,seq);shots=shots_codes_nested[i]
                if not shots:shot_tabs.addTab(QtWidgets.QLabel(f"No shots for {seq}."),"No Shots");continue
                for shot in sorted(shots):
                    content_widget=QtWidgets.QWidget();self._setup_simple_scroll_content(content_widget,[]);seq_prefix=f"{seq}_";display_name=shot.replace(seq_prefix,"",1)if shot.startswith(seq_prefix)else shot;shot_tabs.addTab(content_widget,display_name)
                    
    def _create_main_tab_content_widget(self,tab_name):
        if tab_name in self.ASSET_TYPES:
            inner_tabs=QtWidgets.QTabWidget()
            for cat_name in self.HAL_CATEGORY_TYPES:content=QtWidgets.QWidget();self._setup_simple_scroll_content(content,[]);inner_tabs.addTab(content,cat_name)
            return inner_tabs
        return QtWidgets.QWidget()
        
    def _get_file_format(self,file_path:str)->str:
        if not file_path or not isinstance(file_path,str):return"unknown"
        if file_path.lower().endswith('.bgeo.sc'): return "bgeo.sc"
        return file_path.rsplit('.',1)[-1].lower() if '.' in file_path else "unknown"

    def _create_thumbnail_widget(self,version_data):
        thumb_widget=CustomThumbnailWidget(version_data,self.current_thumbnail_size,parent=self);thumb_widget.clicked.connect(self._handle_thumbnail_click)
        return thumb_widget
        
    def _setup_simple_scroll_content(self,parent_widget,versions_data=None):
        if versions_data is None:versions_data=[]
        def clear_layout(layout):
            if layout is None:return
            while layout.count():item=layout.takeAt(0);widget=item.widget()
            if widget:widget.deleteLater()
            else:clear_layout(item.layout())
        if parent_widget.layout():clear_layout(parent_widget.layout())
        else:parent_widget.setLayout(QtWidgets.QVBoxLayout())
        parent_widget.layout().setContentsMargins(0,0,0,0);scroll=QtWidgets.QScrollArea();scroll.setWidgetResizable(True);scroll.setStyleSheet("QScrollArea { border: none; }");parent_widget.layout().addWidget(scroll);grid_container=QtWidgets.QWidget();content_layout=QtWidgets.QGridLayout(grid_container);content_layout.setAlignment(QtCore.Qt.AlignTop|QtCore.Qt.AlignLeft);content_layout.setContentsMargins(10,10,10,10);content_layout.setSpacing(10);scroll.setWidget(grid_container)
        
        unique_formats = sorted(list(set(f for v in versions_data for path in v.get('sg_path_to_geometry', []) for f in [self._get_file_format(path)] if f != "unknown")))
        current_format = self.render_combo.currentText()
        
        self.render_combo.blockSignals(True)
        self.render_combo.clear()
        if unique_formats: 
            self.render_combo.addItems(unique_formats)
            if current_format in unique_formats: self.render_combo.setCurrentText(current_format)
            elif unique_formats: self.render_combo.setCurrentIndex(0)
        else:
            self.render_combo.addItem("N/A")
        self.render_combo.blockSignals(False)
        
        if versions_data:
            column_count=max(1,self.left_panel_widget.width()//(self.current_thumbnail_size[0]+15))
            for i,version in enumerate(versions_data):
                original_paths=version.get('sg_path_to_geometry',[]);match_paths=[p for p in original_paths if self._get_file_format(p)==self.render_combo.currentText()];version['selected_geo_path']=match_paths[0]if match_paths else(original_paths[0]if original_paths else None)
                if original_paths:
                    path_for_thumb=original_paths[0];image_prefix=version.get('image')
                    if path_for_thumb and image_prefix:
                        thumb_folder=os.path.join(os.path.dirname(path_for_thumb),"_SGthumbnail")
                        if os.path.isdir(thumb_folder):
                            try:
                                files=[os.path.join(thumb_folder,f)for f in os.listdir(thumb_folder)if f.startswith(image_prefix)]
                                if len(files)==1:version['image_path']=files[0].replace(os.sep,"/")
                            except OSError as e:print(f"Warning: Could not read {thumb_folder}: {e}")
                thumb_widget=self._create_thumbnail_widget(version);content_layout.addWidget(thumb_widget,i//column_count,i%column_count)
        else:
            no_data_label=QtWidgets.QLabel("No items found or all items filtered.");no_data_label.setAlignment(QtCore.Qt.AlignCenter);content_layout.addWidget(no_data_label,0,0,1,1)
        
        self._update_houdini_usd_settings_visibility()
        self._update_displayed_info()

    def setup_options_panel(self, parent_widget):
        layout = QtWidgets.QVBoxLayout(parent_widget); layout.setContentsMargins(9,9,9,9)
        title = QtWidgets.QLabel("Options"); title.setAlignment(QtCore.Qt.AlignCenter); title.setStyleSheet("font-weight: bold; font-size: 14px; padding-bottom: 5px;")
        layout.addWidget(title)
        import_group = QtWidgets.QGroupBox("导入设置")
        import_layout = QtWidgets.QGridLayout(import_group)
        import_layout.addWidget(QtWidgets.QLabel("格式筛选:"), 0, 0)
        self.render_combo = QtWidgets.QComboBox()
        import_layout.addWidget(self.render_combo, 0, 1)
        import_layout.addWidget(QtWidgets.QLabel("版本筛选:"), 1, 0)
        self.material_combo = QtWidgets.QComboBox(); self.material_combo.setMaxVisibleItems(20)
        import_layout.addWidget(self.material_combo, 1, 1)
        import_layout.addWidget(QtWidgets.QLabel("工程文件路径:"), 2, 0)
        self.file_path_label = QtWidgets.QLabel("N/A"); self.file_path_label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse); self.file_path_label.setWordWrap(True)
        import_layout.addWidget(self.file_path_label, 2, 1)
        import_layout.addWidget(QtWidgets.QLabel("Publish日期:"), 3, 0)
        self.publish_date_label = QtWidgets.QLabel("N/A"); self.publish_date_label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        import_layout.addWidget(self.publish_date_label, 3, 1)
        import_layout.addWidget(QtWidgets.QLabel("名称筛选:"), 4, 0)
        self.name_filter_edit = QtWidgets.QLineEdit(); self.name_filter_edit.setPlaceholderText("Filter by name...")
        import_layout.addWidget(self.name_filter_edit, 4, 1)
        self.houdini_usd_label = QtWidgets.QLabel("Houdini USD导入设置:")
        self.houdini_usd_combo = QtWidgets.QComboBox()
        self.houdini_usd_combo.addItems(["sublayer", "reference::2.0"])
        import_layout.addWidget(self.houdini_usd_label, 5, 0)
        import_layout.addWidget(self.houdini_usd_combo, 5, 1)
        layout.addWidget(import_group)
        layout_group = QtWidgets.QGroupBox("布局设置")
        layout_form = QtWidgets.QFormLayout(layout_group)
        self.size_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal); self.size_slider.setRange(0, len(self.THUMB_SIZES) - 1); self.size_slider.setValue(self.DEFAULT_THUMB_SIZE_INDEX)
        layout_form.addRow("缩略图大小:", self.size_slider)
        layout.addWidget(layout_group)
        layout.addStretch()
        self.render_combo.currentIndexChanged.connect(self._apply_filters)
        self.material_combo.currentIndexChanged.connect(self._update_displayed_info)
        self.name_filter_edit.textChanged.connect(self._apply_filters)
        self.size_slider.valueChanged.connect(self._update_thumbnail_size)
        self._update_houdini_usd_settings_visibility()

    def _update_houdini_usd_settings_visibility(self):
        is_houdini = CURRENT_DCC == "Houdini"
        is_usd_format = self.render_combo.currentText() in ["usdc", "usda", "usd"]
        is_visible = is_houdini and is_usd_format
        self.houdini_usd_label.setVisible(is_visible)
        self.houdini_usd_combo.setVisible(is_visible)

    def _analyze_shotgun_data_from_env(self):
        seq_str=os.environ.get("SG_Find_Sequence");shot_str=os.environ.get("SG_Find_Shot")
        if not seq_str or not shot_str:return[],[]
        try:all_seq=ast.literal_eval(seq_str);all_shot=ast.literal_eval(shot_str)
        except(ValueError,SyntaxError)as e:print(f"Error parsing env vars: {e}");return[],[]
        seq_map={s.get('code'):[]for s in all_seq if s.get('code')}
        for shot in all_shot:
            code=shot.get('code');seq_info=shot.get('sequence')
            if code and seq_info and seq_info.get('code')in seq_map:seq_map[seq_info['code']].append(code)
        sorted_codes=sorted(seq_map.keys());return sorted_codes,[sorted(seq_map[c])for c in sorted_codes]
        
    def _toggle_layout_orientation(self):
        orientation=self.main_splitter.orientation();new_orientation=QtCore.Qt.Vertical if orientation==QtCore.Qt.Horizontal else QtCore.Qt.Horizontal;self.main_splitter.setOrientation(new_orientation)
        
    def _handle_thumbnail_click(self, widget: CustomThumbnailWidget):
        if self.currently_selected_widget is not None and self.currently_selected_widget != widget: self.currently_selected_widget.set_selected(False)
        self.currently_selected_widget = widget; self.currently_selected_widget.set_selected(True)
        self._query_and_populate_versions(widget)
        
    def _handle_cancel_selection(self):
        if self.currently_selected_widget:self.currently_selected_widget.set_selected(False);self.currently_selected_widget=None
        self.material_combo.clear()
        self._update_displayed_info()
        
    def _get_version_history_from_shotgun(self, widget: CustomThumbnailWidget):
        if not self.sg: print("ERROR: No ShotGrid connection available."); return []
        version_data = widget.version_data
        project_id = self.project_info.get('id')
        entity = version_data.get('entity')
        if not project_id or not entity or not entity.get('id'):
            print("ERROR: Missing Project ID or Entity ID for query."); return []
        parent_entity_id = int(entity['id']); parent_entity_type = entity.get('type')
        context_parts = []
        current_tab_widget = self.bottom_tab_widget
        while isinstance(current_tab_widget, QtWidgets.QTabWidget) and current_tab_widget.count() > 0:
            context_parts.append(current_tab_widget.tabText(current_tab_widget.currentIndex()))
            current_widget_content = current_tab_widget.currentWidget()
            if isinstance(current_widget_content, QtWidgets.QTabWidget):
                current_tab_widget = current_widget_content
            else: break
        if not context_parts: print("ERROR: Could not determine task from UI tabs."); return []
        task_name = context_parts[0]
        try:
            filters = [
                ['project', 'is', {'type': 'Project', 'id': int(project_id)}],
                ['entity', 'is', {'type': parent_entity_type, 'id': parent_entity_id}],
                ['code', 'contains', f'_{task_name}_']
            ]
            fields = ['id', 'code', 'sg_path_to_geometry', 'entity', 'user', 'created_at']
            versions = self.sg.find('Version', filters, fields, order=[{'field_name': 'created_at', 'direction': 'desc'}])
            return versions
        except Exception as e:
            print(f"ERROR querying versions from ShotGrid: {e}"); traceback.print_exc(); return []
        
    def _query_and_populate_versions(self, widget: CustomThumbnailWidget):
        version_history = self._get_version_history_from_shotgun(widget)
        self.material_combo.blockSignals(True)
        self.material_combo.clear()
        if version_history:
            version_history.sort(key=lambda v: v.get('code', ''), reverse=True)
            for version in version_history:
                self.material_combo.addItem(version.get('code', 'N/A'), userData=version)
        self.material_combo.blockSignals(False)
        self._update_displayed_info()
        
    def _update_displayed_info(self):
        selected_version_data = self.material_combo.currentData()
        if not selected_version_data:
            self.file_path_label.setText("N/A"); self.publish_date_label.setText("N/A")
            return
        created_at = selected_version_data.get('created_at')
        if created_at and isinstance(created_at, datetime): self.publish_date_label.setText(created_at.strftime("%m/%d/%y %I:%M%p"))
        else: self.publish_date_label.setText("N/A")
        selected_format = self.render_combo.currentText()
        all_paths = []
        sg_path_data = selected_version_data.get('sg_path_to_geometry')
        if isinstance(sg_path_data, str):
            clean_path = sg_path_data.strip()
            if clean_path.startswith('[') and clean_path.endswith(']'):
                try: all_paths = ast.literal_eval(clean_path)
                except (ValueError, SyntaxError): all_paths = [sg_path_data]
            else: all_paths = [sg_path_data] if clean_path else []
        elif isinstance(sg_path_data, list): all_paths = sg_path_data
        found_path = "N/A"
        for path in all_paths:
            if self._get_file_format(path) == selected_format:
                found_path = path
                break
        self.file_path_label.setText(found_path)
        
    def _apply_filters(self):
        self._handle_cancel_selection()
        self._update_houdini_usd_settings_visibility()
        name_filter_text = self.name_filter_edit.text().lower()
        filtered_versions = []
        if not name_filter_text: 
            filtered_versions = self.all_versions_for_context
        else:
            for version in self.all_versions_for_context:
                if name_filter_text in version.get('code', '').lower(): 
                    filtered_versions.append(version)
        current_tab_widget = self.bottom_tab_widget
        while isinstance(current_tab_widget, QtWidgets.QTabWidget):
            if current_tab_widget.count() == 0: break
            content_widget = current_tab_widget.currentWidget()
            if isinstance(content_widget, QtWidgets.QTabWidget):
                 current_tab_widget = content_widget
            else:
                 current_tab_widget = content_widget
                 break
        if current_tab_widget and not isinstance(current_tab_widget, QtWidgets.QTabWidget):
             self._setup_simple_scroll_content(current_tab_widget, filtered_versions)
        
    def _update_thumbnail_size(self, value):
        if value < len(self.THUMB_SIZES):
            self.current_thumbnail_size = self.THUMB_SIZES[value]
            self._apply_filters()

# if __name__ == '__main__':
#     app = QtWidgets.QApplication.instance();
#     if not app: app = QtWidgets.QApplication(sys.argv)
#     os.environ['HAL_PROJECT'] = 'pipelinernd_rnd-0192'
#     os.environ['DY_DCC'] = 'Houdini'
#     os.environ['SG_Find_Sequence'] = "[{'type': 'Sequence', 'id': 1, 'code': 'sc010'}]"
#     os.environ['SG_Find_Shot'] = "[{'type': 'Shot', 'id': 101, 'code': 'sc010_0010', 'sequence': {'type': 'Sequence', 'id': 1, 'code': 'sc010'}}]"
#     def mock_login_to_shotgun():
#         class MockSgConnection:
#             def find_one(self, et, f, fi): return {'id': 192, 'type': 'Project'}
#             def find(self, et, f, fi, order=None):
#                  print(f"Mock find called with filters: {f}")
#                  return [
#                      {'code': 'test_0010_anim_v013_yud', 'id': 1234, 'created_at': datetime.now(), 'sg_path_to_geometry': '["X:/path/v13.usdc", "X:/path/v13.abc"]'},
#                      {'code': 'test_0010_anim_v012_yud', 'id': 1233, 'created_at': datetime(2024, 5, 20), 'sg_path_to_geometry': 'X:/path/v12.usdc'}
#                  ]
#         return MockSgConnection()
#     login_to_shotgun = mock_login_to_shotgun
#     class MockSgDataModule:
#         class ShotgunDataManager:
#             def find_files(self, ctx=""):
#                 print(f"MockDataManager: find_files called with context: '{ctx}'")
#                 if "anim/sc010/0010" in ctx:
#                     return [
#                         {'code': 'test_0010_anim_v013_yud', 'entity': {'type': 'Shot', 'id': 101, 'name': 'sc010_0010'}, 'sg_path_to_geometry': '["X:/path/v13.usdc", "X:/path/v13.abc"]', 'image': 'test_0010_anim_v013_yud'},
#                     ]
#                 return []
#     sys.modules['shotgun_data_manager'] = MockSgDataModule()
#     ui = ShotgunLibraryUI()
#     ui.show()
#     sys.exit(app.exec_())