"""Shotgun data management for the Shotgun Library tool."""

import importlib
import sys
import shotgun_api3
import os
import re
from typing import List, Dict

def get_command():
    def _command():
        try:
            manager = ShotgunDataManager()
            return manager
        except Exception as e:
            print(f"Failed: {str(e)}")
    return _command

_manager_instance = None

def execute():
    global _manager_instance
    importlib.reload(sys.modules[__name__])
    
    if _manager_instance:
        try:
            _manager_instance = None
        except:
            pass
    
    try:
        print("Attempting to create ShotgunDataManager...")
        _manager_instance = ShotgunDataManager()
        print("Successfully created ShotgunDataManager")
        print(f"Connected to Shotgun server: {_manager_instance.sg.server_info()}")
        print(f"Project: {_manager_instance.HAL_PROJECT}")
        print(f"User: {_manager_instance.HAL_USER_LOGIN}")
        return _manager_instance
    except Exception as e:
        print(f"Failed to create manager: {str(e)}")
        print("Check your Shotgun credentials in sg_register.py")
        print("And verify environment variables in env.py")
        raise

class ShotgunDataManager:
    def __init__(self):
        # Import Shotgun credentials from sg_register
        from sg_register import login_to_shotgun
        self.sg = login_to_shotgun()
        
        # Import and use environment config
        from env import env_config
        self.env = env_config
        
        # Load environment variables
        self._load_env_vars()
        self.data_store = {}
    
    def _load_env_vars(self):
        """Load environment variables from env config"""
        self.HAL_PROJECT_SGID = int(self.env.HAL_PROJECT_SGID or 0)
        self.HAL_PROJECT = self.env.HAL_PROJECT
        self.HAL_USER_LOGIN = self.env.HAL_USER_LOGIN
        self.HAL_TREE = self.env.HAL_TREE
        
        # Entity-specific variables
        if self.HAL_TREE == "assets":
            self.HAL_ASSET_SGID = int(self.env.HAL_ASSET_SGID or 0)
        elif self.HAL_TREE == "shots":
            self.HAL_SHOT_SGID = int(self.env.HAL_SHOT_SGID or 0)

    def extract_filename_from_url(self, url: str) -> str:
        """Extract base filename without extension from URL"""
        if not url:
            return "No Image"
        match = re.search(r'filename%3D%22([^%]+?)%22', url)
        if match:
            filename = match.group(1).split('.')[0]
            return re.sub(r'[^a-zA-Z0-9_-]', '_', filename)  # Sanitize
        return "Unparsable URL"

    def _categorize_version(self, version_data: Dict):
        """Categorize version by entity type using regex patterns"""
        entity_type = version_data.get("entity", {}).get("type", "")
        code = version_data.get("code", "").lower()
        
        if entity_type == "Asset":
            pattern = r'(mdl|shd|rig|txt|cgfx-setup|cncpt)'
            match = re.search(pattern, code)
            version_data["category"] = match.group(1) if match else "asset_unknown"
        
        elif entity_type == "Shot":
            pattern = r'(anim|cgfx|comp|layout|lgt|mm|matp|paint|roto)'
            match = re.search(pattern, code)
            version_data["category"] = match.group(1) if match else "shot_unknown"

    def find_files(self) -> List[Dict]:
        """Retrieve and categorize Version entities from Shotgun"""
        # Validate user exists
        current_user = self.sg.find_one('HumanUser', [['login', 'is', self.HAL_USER_LOGIN]], ['id'])
        if not current_user:
            print("Error: Current user not found in Shotgun")
            return []

        # Verify field existence
        if "sg_path_to_geometry" not in self.sg.schema_field_read("Version"):
            raise Exception("sg_path_to_geometry field undefined in Version entity")

        # Query Versions with geometry paths
        filters = [
            ["project", "is", {"type": "Project", "id": self.HAL_PROJECT_SGID}],
            ["sg_path_to_geometry", "is_not", None]
        ]
        fields = ["id", "code", "sg_path_to_geometry", "image", "entity"]
        versions = self.sg.find("Version", filters, fields)

        print(f"Found {len(versions)} versions with geometry paths")
        
        # Process each version
        for version in versions:
            print(f"Processing version: {version.get('code')}")
            version["image"] = self.extract_filename_from_url(version.get("image"))
            self._categorize_version(version)  # Apply regex categorization
            self._print_version_paths(version)
        
        if not versions:
            print("No versions found with geometry paths")
        
        return versions

    def _print_version_paths(self, version: Dict):
        """Print full version name, geo path and thumbnail path"""
        print(f"Version Name: {version.get('code', 'N/A')}")
        print(f"Geometry Path: {version.get('sg_path_to_geometry', 'N/A')}")
        print(f"Thumbnail Path: {version.get('image', 'N/A')}")
        print("-" * 50)
