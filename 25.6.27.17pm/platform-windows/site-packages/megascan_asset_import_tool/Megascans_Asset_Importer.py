# -*-coding:utf-8-*-
import time
import sys
import re
import os
import json
from .flowLayout import FlowLayout
import hou
import shutil
# reload(sys)
# sys.setdefaultencoding('utf8')

from hutil.Qt.QtWidgets import *
from hutil.Qt.QtGui import *
from hutil.Qt.QtCore import *

# from PyQt5.QtWidgets import *
# from PyQt5.QtGui import *
# from PyQt5.QtCore import *


class Megascans_Asset_Importer(QWidget):
    def __init__(self):
        super(Megascans_Asset_Importer, self).__init__()

        # self.hh = hou.hscriptExpandString('$HH')
        self.script_path = os.path.dirname(__file__)
        styleSheet = self.readQssFile(self.script_path+'/ManjaroMix.qss')

        self.setStyleSheet(styleSheet)
        # self.setStyleSheet('QWidget{background-color:rgb(51, 51, 51);}')
        self.cwd = os.getcwd()

        self.initUI()
        self.readSettings()
        # self.initList()
        # self.updateList()



    def initUI(self):
        self.setWindowTitle('Megascans Asset Importer')
        self.resize(750,600)
        mainlayout = QVBoxLayout()


        self.tab_wdg = QTabWidget()


        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.tab3 = QWidget()
        self.tab4 = QWidget()
        self.tab5 = QWidget()
        self.tab6 = QWidget()
        self.tab7 = QWidget()
        self.tab8 = QWidget()
        self.tab9 = QWidget()

        self.tab_wdg.addTab(self.tab1, '3D Asset')
        self.tab_wdg.addTab(self.tab2,'3D Plants')
        self.tab_wdg.addTab(self.tab3,'Surfaces' )
        self.tab_wdg.addTab(self.tab4,'Decals')
        self.tab_wdg.addTab(self.tab5,'Atlases')
        self.tab_wdg.addTab(self.tab6,'Imperfections')
        self.tab_wdg.addTab(self.tab7,'Displacements')
        self.tab_wdg.addTab(self.tab8,'Brushes')
        self.tab_wdg.addTab(self.tab9,'Import Options')


        self.tab1UI()
        self.tab2UI()
        self.tab3UI()
        self.tab4UI()
        self.tab5UI()
        self.tab6UI()
        self.tab7UI()
        self.tab8UI()
        self.tab9UI()

        self.botton_layout = QGridLayout()

        self.icon_size = QLabel('Icon Size')



        self.slider = QSlider(Qt.Horizontal)

        self.slider.setMinimum(50)
        self.slider.setMaximum(700)
        # self.slider.setSingleStep(2)
        self.slider.setValue(200)




        self.message_lab = QLabel('Console：')
        self.show_message_line_text = QLineEdit()
        self.show_message_line_text.setDisabled(True)

        self.close_btn = QPushButton('Close')
        self.refresh_btn = QPushButton('Refresh')


        self.botton_layout.addWidget(self.icon_size, 0, 0, 1, 1)
        self.botton_layout.addWidget(self.slider, 0, 1, 1, 3)
        # self.botton_layout.addWidget(self.message_lab, 1, 0, 1, 1)
        # self.botton_layout.addWidget(self.show_message_line_text, 1, 1, 1, 3)
        self.botton_layout.addWidget(self.refresh_btn, 1, 0, 1, 2)
        self.botton_layout.addWidget(self.close_btn, 1, 2, 1, 2)


        mainlayout.addWidget(self.tab_wdg)
        mainlayout.addLayout(self.botton_layout)

        self.setLayout(mainlayout)


        #_____________________________________________Connect______________________________________________

        self.refresh_btn.clicked.connect(self.updateList)
        self.close_btn.clicked.connect(self.writeSettings)
        self.close_btn.clicked.connect(self.closeWin)
        self.slider.valueChanged.connect(self.setAllImgViewSize)




    def tab1UI(self):
        layout = QVBoxLayout()
        self.wdg_3d = QWidget()

        # self.wdg_3d.find()
        # self.wdg_3d.findChild()
        # self.wdg_3d.findChildren()
        # self.wdg_3d.
        # list_wdg =QListWidget()
        # list_wdg.clear()
        # qlay = QLayout()
        # qlay.children().
        #

        self.asset_3d_img_view = FlowLayout(self.wdg_3d)

        self.scroll_3d = QScrollArea()
        self.scroll_3d.setWidgetResizable(True)
        self.scroll_3d.setWidget(self.wdg_3d)
        layout.addWidget(self.scroll_3d)
        self.tab1.setLayout(layout)

        #
        # self.wdg_3d.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_3d.customContextMenuRequested.connect(self.custom_right_menu)


    def tab2UI(self):
        layout = QVBoxLayout()
        self.wdg_3D_Plants = QWidget()

        self.asset_3D_Plants_img_view = FlowLayout(self.wdg_3D_Plants)
        self.scroll_3D_Plants = QScrollArea()
        self.scroll_3D_Plants.setWidgetResizable(True)
        self.scroll_3D_Plants.setWidget(self.wdg_3D_Plants)
        layout.addWidget(self.scroll_3D_Plants)
        self.tab2.setLayout(layout)

        #
        # self.wdg_3D_Plants.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_3D_Plants.customContextMenuRequested.connect(self.custom_right_menu)

    def tab3UI(self):
        layout = QVBoxLayout()
        self.wdg_Surfaces = QWidget()

        self.asset_Surfaces_img_view = FlowLayout(self.wdg_Surfaces)
        self.scroll_Surfaces = QScrollArea()
        self.scroll_Surfaces.setWidgetResizable(True)
        self.scroll_Surfaces.setWidget(self.wdg_Surfaces)
        layout.addWidget(self.scroll_Surfaces)
        self.tab3.setLayout(layout)

        #
        # self.wdg_Surfaces.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_Surfaces.customContextMenuRequested.connect(self.custom_right_menu)

    def tab4UI(self):
        layout = QVBoxLayout()
        self.wdg_Decals = QWidget()

        self.asset_Decals_img_view = FlowLayout(self.wdg_Decals)
        self.scroll_Decals = QScrollArea()
        self.scroll_Decals.setWidgetResizable(True)
        self.scroll_Decals.setWidget(self.wdg_Decals)
        layout.addWidget(self.scroll_Decals)
        self.tab4.setLayout(layout)

        #
        # self.wdg_Decals.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_Decals.customContextMenuRequested.connect(self.custom_right_menu)

    def tab5UI(self):
        layout = QVBoxLayout()
        self.wdg_Atlases = QWidget()

        self.asset_Atlases_img_view = FlowLayout(self.wdg_Atlases)
        self.scroll_Atlases = QScrollArea()
        self.scroll_Atlases.setWidgetResizable(True)
        self.scroll_Atlases.setWidget(self.wdg_Atlases)
        layout.addWidget(self.scroll_Atlases)
        self.tab5.setLayout(layout)

        # self.wdg_Atlases.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_Atlases.customContextMenuRequested.connect(self.custom_right_menu)

    def tab6UI(self):
        layout = QVBoxLayout()
        self.wdg_Imperfections = QWidget()

        self.asset_Imperfections_img_view = FlowLayout(self.wdg_Imperfections)
        self.scroll_Imperfections = QScrollArea()
        self.scroll_Imperfections.setWidgetResizable(True)
        self.scroll_Imperfections.setWidget(self.wdg_Imperfections)
        layout.addWidget(self.scroll_Imperfections)
        self.tab6.setLayout(layout)
        #
        # self.wdg_Imperfections.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_Imperfections.customContextMenuRequested.connect(self.custom_right_menu)

    def tab7UI(self):
        layout = QVBoxLayout()
        self.wdg_Displacements = QWidget()

        self.asset_Displacements_img_view = FlowLayout(self.wdg_Displacements)
        self.scroll_Displacements = QScrollArea()
        self.scroll_Displacements.setWidgetResizable(True)
        self.scroll_Displacements.setWidget(self.wdg_Displacements)
        layout.addWidget(self.scroll_Displacements)
        self.tab7.setLayout(layout)

        # self.wdg_Displacements.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_Displacements.customContextMenuRequested.connect(self.custom_right_menu)

    def tab8UI(self):
        layout = QVBoxLayout()
        self.wdg_Brushes = QWidget()

        self.asset_Brushes_img_view = FlowLayout(self.wdg_Brushes)
        self.scroll_Brushes = QScrollArea()
        self.scroll_Brushes.setWidgetResizable(True)
        self.scroll_Brushes.setWidget(self.wdg_Brushes)
        layout.addWidget(self.scroll_Brushes)
        self.tab8.setLayout(layout)

        # self.wdg_Brushes.setContextMenuPolicy(Qt.CustomContextMenu)
        # self.wdg_Brushes.customContextMenuRequested.connect(self.custom_right_menu)



    def tab9UI(self):
        layout = QVBoxLayout()

        self.lineTxet = QLineEdit()
        self.lineTxet.setPlaceholderText('Select  Megascans  Asset  Download  Path')
        self.bro_btn = QPushButton('Browse')

        self.grid_layout1 = QGridLayout()

        self.grid_layout1.addWidget(self.lineTxet, 0, 0, 1, 3)
        self.grid_layout1.addWidget(self.bro_btn, 0, 3, 1, 1)
        layout.addLayout(self.grid_layout1)


        self.lineTxet.textChanged.connect(self.updateList)
        self.bro_btn.clicked.connect(self.getDir)




        self.uiBox = QGroupBox()
        layout.addWidget(self.uiBox)
        # self.uiBox.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        # self.ToolBox.addItem(self.uiBox, "Import Options")

        # mainlayout.addWidget(self.uiBox)

        uiBoxLayout = QVBoxLayout()
        self.uiBox.setLayout(uiBoxLayout)

        group_box_L = QGroupBox()
        # group_box_L.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        uiBoxLayout.addWidget(group_box_L)

        miscOptionsL = QGridLayout()

        group_box_L.setLayout(miscOptionsL)

        self.renderBoxText = QLabel('Renderer :')
        # self.renderBoxText.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        miscOptionsL.addWidget(self.renderBoxText, 0, 0)

        rendererList = ['Mantra', 'Redshift']

        self.renderBoxInput = QComboBox()
        # self.renderBoxInput.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        self.renderBoxInput.setToolTip("Currently selected Renderer")
        self.renderBoxInput.addItems(rendererList)

        miscOptionsL.addWidget(self.renderBoxInput, 0, 1)

        materialBoxText = QLabel("Material Type:")
        # materialBoxText.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        miscOptionsL.addWidget(materialBoxText, 1, 0)

        self.materialBoxList = QComboBox()
        # self.materialBoxList.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        self.materialBoxList.setToolTip("Selected material type for the Renderer")
        miscOptionsL.addWidget(self.materialBoxList, 1, 1)

        separatorFrame = QFrame()
        separatorFrame.setFrameShape(QFrame.HLine)
        separatorFrame.setFrameShadow(QFrame.Sunken)
        miscOptionsL.addWidget(separatorFrame, 2, 0, 1, 2)


        textureSizeBoxText = QLabel("Texture Size:")
        # materialBoxText.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        miscOptionsL.addWidget(textureSizeBoxText, 3, 0)


        self.textureSizeBoxList = QComboBox()
        # self.materialBoxList.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        textureSizeList = ['2K', '4K']
        self.textureSizeBoxList.addItems(textureSizeList)
        # self.materialBoxList.setToolTip("Selected material type for the Renderer")
        miscOptionsL.addWidget(self.textureSizeBoxList, 3, 1)



        #
        # textureFormatBoxText = QLabel("Texture Format:")
        # # materialBoxText.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        # miscOptionsL.addWidget(textureFormatBoxText, 4, 0)
        #
        # self.textureFormatBoxList = QComboBox()
        # # self.materialBoxList.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        # textureFormatList = ['jpg', 'exr','png']
        # self.textureFormatBoxList.addItems(textureFormatList)
        # # self.textureFormatBoxList.setToolTip("Selected material type for the Renderer")
        # miscOptionsL.addWidget(self.textureFormatBoxList, 4, 1)
        #
        #
        #
        #
        # modleFormatBoxText = QLabel("Modle Format:")
        # # materialBoxText.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        # miscOptionsL.addWidget(modleFormatBoxText, 5, 0)
        #
        # self.modleFormatBoxList = QComboBox()
        # # self.materialBoxList.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        # modleFormatList = ['fbx', 'obj', 'abc']
        # self.modleFormatBoxList.addItems(modleFormatList)
        # # self.textureFormatBoxList.setToolTip("Selected material type for the Renderer")
        # miscOptionsL.addWidget(self.modleFormatBoxList, 5, 1)





        self.updateMaterialList(self.renderBoxInput.currentText())
        self.renderBoxInput.currentIndexChanged.connect(lambda: self.updateMaterialList(self.renderBoxInput.currentText()))




        group_box_R = QGroupBox()
        # group_box_R.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        uiBoxLayout.addWidget(group_box_R)

        miscOptionsR = QGridLayout()
        group_box_R.setLayout(miscOptionsR)

        # self.setupScatteringRadio = QCheckBox("Use Megascans Scattering")
        # # self.setupScatteringRadio.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        # self.setupScatteringRadio.setToolTip("Setup Megascans scattering for 3D Assets")
        # self.setupScatteringRadio.setObjectName("UseScattering")
        # miscOptionsR.addWidget(self.setupScatteringRadio, 0, 0)
        # self.setupScatteringRadio.setChecked(True)
        # # setupScatteringRadio.toggled.connect(lambda state: self.miscOptionChanged(setupScatteringRadio, state))

        # Misc option : Mesh setup for Atlas
        self.useAtlasSplitterRadio = QCheckBox("Use Atlas Splitter")
        self.useAtlasSplitterRadio.setChecked(False)
        # self.useAtlasSplitterRadio.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        self.useAtlasSplitterRadio.setToolTip("Generate meshes for Atlas")
        self.useAtlasSplitterRadio.setObjectName("UseAtlasSplitter")
        miscOptionsR.addWidget(self.useAtlasSplitterRadio, 0, 0)
        # useAtlasSplitterRadio.toggled.connect(lambda state: self.miscOptionChanged(useAtlasSplitterRadio, state))

        # Misc option : Enable LODs
        self.enableLodsRadio = QCheckBox("Enable LODs")
        # self.enableLodsRadio.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        self.enableLodsRadio.setToolTip("Import LODs for 3D Assets")
        self.enableLodsRadio.setObjectName("EnableLods")
        miscOptionsR.addWidget(self.enableLodsRadio, 0, 1)
        self.enableLodsRadio.setChecked(True)
        # enableLodsRadio.toggled.connect(lambda state: self.miscOptionChanged(enableLodsRadio, state))

        self.enableMotionCheck = QCheckBox("Apply Motion (Plants)")
        self.enableMotionCheck.setChecked(False)
        # self.enableMotionCheck.setSizePolicy(QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed))
        self.enableMotionCheck.setToolTip("Apply motion to 3D Plants")
        self.enableMotionCheck.setObjectName("ApplyMotion")
        miscOptionsR.addWidget(self.enableMotionCheck, 0, 2)

        self.tab9.setLayout(layout)








    def updateMaterialList(self, selectedRenderer):
        # print selectedRenderer
        if selectedRenderer == 'Mantra':
            supportedMaterials = ["Principled Shader", "Triplanar"]
            self.materialBoxList.clear()
            self.materialBoxList.addItems(supportedMaterials)

        if selectedRenderer == 'Redshift':
            supportedMaterials = ["Redshift Textures", "Redshift Triplanar"]
            self.materialBoxList.clear()
            self.materialBoxList.addItems(supportedMaterials)






    def getDir(self):
        if self.sender().text() == 'Browse':
        # print self.sender().text()

            self.select_path= QFileDialog.getExistingDirectory(self,'Open File')
            self.lineTxet.setText(self.select_path)

        else:
            self.select_path = self.lineTxet.text()


        # print self.select_path

        # self.target_path = self.select_path + '/'+ self.hip_base_name
        # self.target_file = self.target_path + '/' + hou.hipFile.basename()
        #
        # if not os.path.exists(self.target_path):
        #     os.makedirs(self.target_path)

    def jsonFileScanNew(self, path):

        file = open(path, 'rb')
        json_file = json.load(file)
        if 'semanticTags' in json_file:
            asset_name = json_file['semanticTags']['name']
            # print json_file['semanticTags']['name']
            # print json_file['semanticTags']
            asset_name = str(asset_name).replace(' ', '_')
            asset_type = str(json_file['semanticTags']['asset_type'])

            return asset_name, asset_type
        else:
            return None

    def jsonFileScan(self, path):

        file = open(path, 'rb')
        json_file = json.load(file)
        preview_img = []
        asset_type = []
        asset_name = []
        asset_json = []
        asset_name_t = str(json_file['name']).replace(' ', '_')

        asset_location_eval = json_file['asset_location_eval']
        # asset_type = json_file['type']
        # asset_tags = json_file['tags']
        asset_package_files = json_file['asset_package_files']

        for item in asset_package_files:
            asse_full_path = asset_location_eval + '/' + item
            # print asse_full_path
            if os.path.isfile(asse_full_path) and '_Preview' in str(asse_full_path):
                # print asse_full_path
                preview_img.append(str(asse_full_path))
                asset_type.append(str(json_file['type']))
                asset_name.append(asset_name_t)
                asset_json.append(str(path))
            # print preview_img
        return preview_img, asset_type, asset_name, asset_json

        # return asset_name, asset_location_eval, asset_type, asset_tags, asset_package_files






    def initList(self):

        self.getDir()
        path = self.select_path
        # path = 'D:\Megascans\Downloaded'
        self.preview_img_list = []
        self.asset_type_list = []
        self.asset_name_list = []
        self.asset_json_list = []

        for root, dirs, files in os.walk(path, topdown=False):
            count = 0
            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\','/')
                if os.path.isfile(root_path):
                    dir_name = os.path.dirname(root_path)
                    base_name = os.path.basename(root_path)
                    parent_floder = dir_name.split('/')[-1]
                    file_name = base_name.split('.')[0]

                    if root_path.endswith('Preview.png'):
                        # print root_path
                        self.preview_img_list.append(str(root_path))

                    if root_path.endswith('.json') and 'meta' not in base_name:

                        if parent_floder not in ['3d','3dplant', 'surface' ,'atlas' , 'Downloaded', 'DHI', 'hdri']:
                            # print root_path
                            # count +=1
                            # print parent_floder
                            # self.jsonFileScanNew(root_path)
                            if self.jsonFileScanNew(root_path):
                                asset_name, asset_type = self.jsonFileScanNew(root_path)
                                self.asset_type_list.append(asset_type)
                                self.asset_name_list.append(asset_name)

        # print self.preview_img_list
        # print self.asset_name_list
        # print self.asset_type_list
        # print '________________________________________________________________________________'
        # print '________________________________________________________________________________'
        # print '________________________________________________________________________________'


    def addWdgList(self, i, preview_img, asset_name, img_view):

        icon_size = self.slider.value()
        item = QToolButton()
        pixmap = QPixmap(preview_img)
        pixmap.scaledToWidth(icon_size-40)
        pixmap.scaledToHeight(icon_size-40)
        # pixmap.
        item.setText(asset_name )
        item.setIcon(QIcon(pixmap))
        item.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)
        item.setFixedSize(icon_size,icon_size)
        item.setIconSize(QSize(icon_size-40,icon_size-40))
        item.setProperty('img_path', preview_img)
        item.setObjectName(asset_name)
        img_view.addWidget(item)

        # item.clicked.connect(self.importAsset)
        item.clicked.connect(self.importAsset)
        # print item.property('json_path')
        # print preview_img


    def jsonFileRead(self, path):

        file = open(path, 'rb')
        json_file = json.load(file)

        asset_name = json_file['name']
        asset_name = asset_name.replace(' ', '_')
        asset_location_eval = json_file['asset_location_eval']
        asset_type = json_file['type']
        asset_tags = json_file['tags']
        asset_package_files = json_file['asset_package_files']


        return asset_name, asset_location_eval, asset_type, asset_tags, asset_package_files


    def createMantraShader(self,asset_name, preview_img):

        texture_size = self.textureSizePriority(preview_img)

        if hou.node('obj/matnet1') is None:
            matnet = hou.node('/obj/').createNode('matnet')
            matnet.setName('matnet1')
        else:
            matnet = hou.node('obj/matnet1')
        matnet.moveToGoodPosition()

        count = 0
        for child in matnet.children():
            if asset_name in child.name():
                count += 1
        if count:
            asset_name = asset_name + str(count)

        principled_shader = matnet.createNode('principledshader')
        principled_shader.moveToGoodPosition()
        principled_shader.setName(asset_name)


        principled_shader.parm('basecolorr').set(1)
        principled_shader.parm('basecolorg').set(1)
        principled_shader.parm('basecolorb').set(1)
        principled_shader.parm('basecolor_usePointColor').set(0)
        principled_shader.parm('rough').set(1)

        Albedo_map_path_count = 0
        map_list = []
        path = os.path.dirname(preview_img)
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    # print file_name
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]



                    if format == "jpg" or format == "exr":

                        if texture_size in file_name :
                            tex_type = file_name.split('_')[2]
                            if str.lower("Albedo") in str.lower(file_name) and str.lower("Albedo") not in map_list:
                                map_list.append(str.lower("Albedo"))

                                principled_shader.parm('basecolor_useTexture').set(1)
                                principled_shader.parm('basecolor_texture').set(full_path)

                                Albedo_map_path = full_path
                                Albedo_map_path_count += 1

                            if str.lower("Roughness") in str.lower(file_name) and str.lower("Roughness") not in map_list:
                                map_list.append(str.lower("Roughness"))

                                principled_shader.parm('rough_useTexture').set(1)
                                principled_shader.parm('rough_texture').set(full_path)


                            if str.lower("Normal") in str.lower(file_name)  and str.lower("Normal") not in map_list:
                                map_list.append(str.lower("Normal"))

                                principled_shader.parm('baseBumpAndNormal_enable').set(1)
                                principled_shader.parm('baseNormal_texture').set(full_path)

                            if str.lower("Displacement") in str.lower(file_name) and format == "exr" and str.lower("Displacement") not in map_list:
                                map_list.append(str.lower("Displacement"))

                                principled_shader.parm('dispTex_enable').set(1)
                                principled_shader.parm('dispTex_scale').set(.015)
                                principled_shader.parm('dispTex_texture').set(full_path)

                            if str.lower("Opacity") in str.lower(file_name) and str.lower("Opacity") not in map_list:
                                map_list.append(str.lower("Opacity"))

                                principled_shader.parm('opaccolor_useTexture').set(1)
                                principled_shader.parm('opaccolor_texture').set(full_path)


                            #
                            #
                            # if str.lower("Translucency") in str.lower(file_name) and str.lower("Translucency") not in map_list:
                            #     map_list.append(str.lower("Translucency"))
                            #
                            #
                            #
                            #
                            # if str.lower("Specular") in str.lower(file_name) and str.lower("Specular") not in map_list:
                            #     map_list.append(str.lower("Specular"))
        self.homeToSelectionNodeNetworkEditor(principled_shader)
        if Albedo_map_path_count:
            return Albedo_map_path
        else:
            return None




    def createMantraTriplanarShader(self,asset_name, preview_img):

        texture_size = self.textureSizePriority(preview_img)

        if hou.node('obj/matnet1') is None:
            matnet = hou.node('/obj/').createNode('matnet')
            matnet.setName('matnet1')
        else:
            matnet = hou.node('obj/matnet1')
        matnet.moveToGoodPosition()

        count = 0
        for child in matnet.children():
            if asset_name in child.name():
                count += 1
        if count:
            asset_name = asset_name + str(count)


        mantra_triplanar = matnet.createNode('quixel_mantra_triplanar')
        # print mantra_triplanar.name()
        # print mantra_triplanar.path()

        mantra_triplanar.moveToGoodPosition()
        prin_path = mantra_triplanar.path() + '_tri'
        principled_shader = hou.node(prin_path)
        principled_shader.moveToGoodPosition()
        principled_shader.setName(asset_name)


        principled_shader.parm('basecolorr').set(1)
        principled_shader.parm('basecolorg').set(1)
        principled_shader.parm('basecolorb').set(1)
        principled_shader.parm('basecolor_usePointColor').set(0)
        principled_shader.parm('rough').set(1)

        Albedo_map_path_count = 0
        map_list = []
        path = os.path.dirname(preview_img)
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    # print file_name
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]



                    if format == "jpg" or format == "exr":

                        if texture_size in file_name :
                            if str.lower("Albedo") in str.lower(file_name) and str.lower("Albedo") not in map_list:
                                map_list.append(str.lower("Albedo"))
                                # print mantra_triplanar.name()
                                mantra_triplanar.parm('ms_albedo').set(full_path)

                                Albedo_map_path = full_path
                                Albedo_map_path_count += 1

                            if str.lower("Roughness") in str.lower(file_name) and str.lower("Roughness") not in map_list:
                                map_list.append(str.lower("Roughness"))

                                mantra_triplanar.parm('ms_rough').set(full_path)


                            if str.lower("Normal") in str.lower(file_name)  and str.lower("Normal") not in map_list:
                                map_list.append(str.lower("Normal"))

                                mantra_triplanar.parm('ms_normal').set(full_path)

                            if str.lower("Displacement") in str.lower(file_name) and format == "exr" and str.lower("Displacement") not in map_list:
                                map_list.append(str.lower("Displacement"))

                                mantra_triplanar.parm('ms_disp').set(full_path)

                            if str.lower("Opacity") in str.lower(file_name) and str.lower("Opacity") not in map_list:
                                map_list.append(str.lower("Opacity"))

                                mantra_triplanar.parm('ms_opac').set(full_path)


                            if str.lower("Specular") in str.lower(file_name) and str.lower("Specular") not in map_list:
                                map_list.append(str.lower("Specular"))

                                mantra_triplanar.parm('ms_spec').set(full_path)


                            #
                            #
                            # if str.lower("Translucency") in str.lower(file_name) and str.lower("Translucency") not in map_list:
                            #     map_list.append(str.lower("Translucency"))
                            #
                            #
                            #

        self.homeToSelectionNodeNetworkEditor(principled_shader)
        if Albedo_map_path_count:
            return Albedo_map_path
        else:
            return None






    def createShader(self,asset_name, preview_img):

        texture_size = self.textureSizePriority(preview_img)

        if hou.node('obj/matnet1') is None:
            matnet = hou.node('/obj/').createNode('matnet')
            matnet.setName('matnet1')
        else:
            matnet = hou.node('obj/matnet1')
        matnet.moveToGoodPosition()

        rs_mat = matnet.createNode('redshift_vopnet')
        rs_mat.moveToGoodPosition()
        rs_mat.setName(asset_name)
        rs_out = rs_mat.children()[0]
        rs_out.setName('rs_out')

        rs_material = rs_mat.createNode('redshift::Material')
        rs_material.parm('refl_brdf').set('GGX')
        rs_out.setNamedInput('Surface', rs_material, 'outColor')

        Albedo_map_path_count = 0
        map_list = []
        path = os.path.dirname(preview_img)
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    # print file_name
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]



                    if format == "jpg" or format == "exr":

                        if texture_size in file_name:
                            tex_type = file_name.split('_')[2]
                            if str.lower("Albedo") in str.lower(file_name) and str.lower("Albedo") not in map_list:
                                map_list.append(str.lower("Albedo"))
                                Albedo = rs_mat.createNode('redshift::TextureSampler')
                                # print tex_type
                                Albedo.setName(str("Albedo"))
                                Albedo.parm('tex0').set(full_path)
                                rs_cc = Albedo.createOutputNode('redshift::RSColorCorrection')
                                rs_material.setNamedInput('diffuse_color', rs_cc, 'outColor')
                                Albedo_map_path = full_path
                                Albedo_map_path_count += 1
                                # print Albedo_map_path
                                rs_mat.layoutChildren()
                            if str.lower("Roughness") in str.lower(file_name) and str.lower("Roughness") not in map_list:
                                map_list.append(str.lower("Roughness"))

                                Roughness = rs_mat.createNode('redshift::TextureSampler')
                                Roughness.setName("Roughness")
                                Roughness.parm('tex0').set(full_path)
                                rs_ramp = Roughness.createOutputNode('redshift::RSRamp')
                                rs_material.setNamedInput('refl_roughness', rs_ramp, 'outColor')
                                rs_mat.layoutChildren()
                            if str.lower("Normal") in str.lower(file_name) and str.lower("Normal") not in map_list:
                                map_list.append(str.lower("Normal"))
                                Normal = rs_mat.createNode('redshift::TextureSampler')
                                Normal.setName("Normal")
                                Normal.parm('tex0').set(full_path)
                                rs_bump = Normal.createOutputNode('redshift::BumpMap')
                                rs_bump.parm('inputType').set('Tangent-Space Normal')
                                rs_bump.parm('scale').set(.2)
                                rs_out.setNamedInput('Bump Map', rs_bump, 'out')
                                rs_mat.layoutChildren()
                            if str.lower("Displacement") in str.lower(file_name) and format == "exr" and str.lower("Displacement") not in map_list:
                                map_list.append(str.lower("Displacement"))
                                Displacement = rs_mat.createNode('redshift::TextureSampler')
                                Displacement.setName("Displacement")
                                Displacement.parm('tex0').set(full_path)
                                rs_displac = Displacement.createOutputNode('redshift::Displacement')
                                rs_displac.parm('scale').set(.1)
                                rs_displac.parm('newrange_min').set(-.5)
                                rs_displac.parm('newrange_max').set(.5)
                                rs_out.setNamedInput('Displacement', rs_displac, 'out')
                                rs_mat.layoutChildren()
                            if str.lower("Opacity") in str.lower(file_name) and str.lower("Opacity") not in map_list:
                                map_list.append(str.lower("Opacity"))
                                Opacity = rs_mat.createNode('redshift::Sprite')
                                Opacity.parm('tex0').set(full_path)
                                Opacity.setNamedInput('input', rs_material, 'outColor')
                                rs_out.setNamedInput('Surface', Opacity, 'outColor')
                                rs_mat.layoutChildren()

                            if str.lower("Translucency") in str.lower(file_name) and str.lower("Translucency") not in map_list:
                                map_list.append(str.lower("Translucency"))
                                Translucency = rs_mat.createNode('redshift::TextureSampler')
                                Translucency.parm('tex0').set(full_path)
                                rs_material.setNamedInput('transl_color', Translucency, 'outColor')
                                rs_mat.layoutChildren()

                            if str.lower("Specular") in str.lower(file_name) and str.lower("Specular") not in map_list:
                                map_list.append(str.lower("Specular"))
                                Specular = rs_mat.createNode('redshift::TextureSampler')
                                Specular.setName("Specular")
                                Specular.parm('tex0').set(full_path)
                                rs_material.setNamedInput('refl_color', Specular, 'outColor')
                                rs_mat.layoutChildren()

        if Albedo_map_path_count:
            return Albedo_map_path
        else:
            return None


    def createRSTriplanarShader(self,asset_name, preview_img):

        texture_size = self.textureSizePriority(preview_img)

        if hou.node('obj/matnet1') is None:
            matnet = hou.node('/obj/').createNode('matnet')
            matnet.setName('matnet1')
        else:
            matnet = hou.node('obj/matnet1')
        matnet.moveToGoodPosition()

        count = 0
        for child in matnet.children():
            if asset_name in child.name():
                count += 1
        if count:
            asset_name = asset_name + str(count)


        rs_mat = matnet.createNode('redshift_vopnet')
        rs_mat.moveToGoodPosition()
        rs_mat.setName(asset_name)
        rs_out = rs_mat.children()[0]
        rs_out.setName('rs_out')

        rs_material = rs_mat.createNode('redshift::Material')
        rs_material.parm('refl_brdf').set('GGX')
        rs_out.setNamedInput('Surface', rs_material, 'outColor')

        rs_triplanar = rs_mat.createNode('quixel_redshift_triplanar')

        rs_mat.layoutChildren()

        Albedo_map_path_count =0
        map_list = []
        path = os.path.dirname(preview_img)
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    # print file_name
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]



                    if format == "jpg" or format == "exr":

                        if texture_size in file_name:
                            tex_type = file_name.split('_')[2]
                            if str.lower("Albedo") in str.lower(file_name) and str.lower("Albedo") not in map_list:
                                map_list.append(str.lower("Albedo"))

                                rs_triplanar.parm('albedo').set(full_path)

                                rs_material.setNamedInput('diffuse_color', rs_triplanar, 'albedo')
                                Albedo_map_path = full_path
                                Albedo_map_path_count += 1

                            if str.lower("Roughness") in str.lower(file_name) and str.lower("Roughness") not in map_list:
                                map_list.append(str.lower("Roughness"))

                                rs_triplanar.parm('roughness').set(full_path)

                                rs_material.setNamedInput('refl_roughness', rs_triplanar, 'roughness')
                                rs_mat.layoutChildren()
                            if str.lower("Normal") in str.lower(file_name) and str.lower("Normal") not in map_list:
                                map_list.append(str.lower("Normal"))

                                rs_triplanar.parm('normal').set(full_path)
                                rs_material.setNamedInput('bump_input', rs_triplanar, 'normal')


                            if str.lower("Displacement") in str.lower(file_name) and format == "exr" and str.lower("Displacement") not in map_list:
                                map_list.append(str.lower("Displacement"))

                                rs_triplanar.parm('displacement').set(full_path)

                                rs_displac = rs_mat.createNode('redshift::Displacement')
                                rs_displac.setNamedInput('texMap', rs_triplanar, 'displacement')
                                rs_displac.parm('scale').set(.1)
                                rs_displac.parm('newrange_min').set(-.5)
                                rs_displac.parm('newrange_max').set(.5)
                                rs_out.setNamedInput('Displacement', rs_displac, 'out')
                                rs_mat.layoutChildren()


                            if str.lower("Opacity") in str.lower(file_name) and str.lower("Opacity") not in map_list:
                                map_list.append(str.lower("Opacity"))

                                rs_triplanar.parm('opacity').set(full_path)
                                rs_material.setNamedInput('opacity_color', rs_triplanar, 'opacity')



                            if str.lower("Translucency") in str.lower(file_name) and str.lower("Translucency") not in map_list:
                                map_list.append(str.lower("Translucency"))

                                rs_triplanar.parm('translucency').set(full_path)
                                rs_material.setNamedInput('transl_color', rs_triplanar, 'translucency')


                            if str.lower("Specular") in str.lower(file_name) and str.lower("Specular") not in map_list:
                                map_list.append(str.lower("Specular"))

                                rs_triplanar.parm('specular').set(full_path)
                                rs_material.setNamedInput('refl_color', rs_triplanar, 'specular')
        self.homeToSelectionNodeNetworkEditor(rs_mat)
        if Albedo_map_path_count:
            return Albedo_map_path
        else:
            return None



    def createSurfaceShader(self,asset_name, preview_img):
        texture_size = self.textureSizePriority(preview_img)
        if hou.node('obj/matnet1') is None:
            matnet = hou.node('/obj/').createNode('matnet')
            matnet.setName('matnet1')
        else:
            matnet = hou.node('obj/matnet1')
        matnet.moveToGoodPosition()

        count = 0
        for child in matnet.children():
            if asset_name in child.name():
                count += 1
        if count:
            asset_name = asset_name + str(count)

        rs_mat = matnet.createNode('redshift_vopnet')
        rs_mat.moveToGoodPosition()
        rs_mat.setName(asset_name)
        rs_out = rs_mat.children()[0]
        rs_out.setName('rs_out')

        rs_material = rs_mat.createNode('redshift::Material')
        rs_material.parm('refl_brdf').set('GGX')
        rs_out.setNamedInput('Surface', rs_material, 'outColor')

        path = os.path.dirname(preview_img)
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]

                    if format == "jpg" or format == "exr":

                        if texture_size in file_name and 'Billboard' not in str(full_path) and 'Thumbs' not in str(full_path):
                            if str.lower("Albedo") in str.lower(file_name):
                                Albedo = rs_mat.createNode('redshift::TextureSampler')
                                Albedo.setName(str("Albedo"))
                                Albedo.parm('tex0').set(full_path)
                                rs_cc = Albedo.createOutputNode('redshift::RSColorCorrection')
                                rs_material.setNamedInput('diffuse_color', rs_cc, 'outColor')
                                Albedo_map_path = full_path
                                # print Albedo_map_path
                                rs_mat.layoutChildren()
                            if str.lower("Roughness") in str.lower(file_name):
                                Roughness = rs_mat.createNode('redshift::TextureSampler')
                                Roughness.setName("Roughness")
                                Roughness.parm('tex0').set(full_path)
                                rs_ramp = Roughness.createOutputNode('redshift::RSRamp')
                                rs_material.setNamedInput('refl_roughness', rs_ramp, 'outColor')
                                rs_mat.layoutChildren()
                            if str.lower("Normal") in str.lower(file_name) :
                                Normal = rs_mat.createNode('redshift::TextureSampler')
                                Normal.setName("Normal")
                                Normal.parm('tex0').set(full_path)
                                rs_bump = Normal.createOutputNode('redshift::BumpMap')
                                rs_bump.parm('inputType').set('Tangent-Space Normal')
                                rs_bump.parm('scale').set(.2)
                                rs_out.setNamedInput('Bump Map', rs_bump, 'out')
                                rs_mat.layoutChildren()
                            if str.lower("Displacement") in str.lower(file_name) and format == "exr":
                                Displacement = rs_mat.createNode('redshift::TextureSampler')
                                Displacement.setName("Displacement")
                                Displacement.parm('tex0').set(full_path)
                                rs_displac = Displacement.createOutputNode('redshift::Displacement')
                                rs_displac.parm('scale').set(.1)
                                rs_displac.parm('newrange_min').set(-.5)
                                rs_displac.parm('newrange_max').set(.5)
                                rs_out.setNamedInput('Displacement', rs_displac, 'out')
                                rs_mat.layoutChildren()
                            if str.lower("Opacity") in str.lower(file_name):
                                Opacity = rs_mat.createNode('redshift::Sprite')
                                Opacity.parm('tex0').set(full_path)
                                Opacity.setNamedInput('input', rs_material, 'outColor')
                                rs_out.setNamedInput('Surface', Opacity, 'outColor')
                                rs_mat.layoutChildren()

                            if str.lower("Translucency") in str.lower(file_name):
                                Translucency = rs_mat.createNode('redshift::TextureSampler')
                                Translucency.setName("Translucency")
                                Translucency.parm('tex0').set(full_path)
                                rs_material.setNamedInput('transl_color', Translucency, 'outColor')
                                rs_mat.layoutChildren()

                            #
                            # if str.lower("Gloss") in str.lower(file_name):
                            #     Gloss = rs_mat.createNode('redshift::TextureSampler')
                            #     Gloss.setName("Gloss")
                            #     Gloss.parm('tex0').set(full_path)
                            #     rs_material.setNamedInput('refl_color', Gloss, 'outColor')
                            #     rs_mat.layoutChildren()


                            if str.lower("Specular") in str.lower(file_name):
                                Specular = rs_mat.createNode('redshift::TextureSampler')
                                Specular.setName("Specular")
                                Specular.parm('tex0').set(full_path)
                                rs_material.setNamedInput('refl_color', Specular, 'outColor')
                                rs_mat.layoutChildren()

        self.homeToSelectionNodeNetworkEditor(rs_mat)

        return Albedo_map_path



    def createImperfectionShader(self, asset_name, preview_img):

        texture_size = self.textureSizePriority(preview_img)
        if hou.node('obj/matnet1') is None:
            matnet = hou.node('/obj/').createNode('matnet')
            matnet.setName('matnet1')
        else:
            matnet = hou.node('obj/matnet1')
        matnet.moveToGoodPosition()

        count = 0
        for child in matnet.children():
            if asset_name in child.name():
                count += 1
        if count:
            asset_name = asset_name + str(count)

        rs_mat = matnet.createNode('redshift_vopnet')
        rs_mat.moveToGoodPosition()
        rs_mat.setName(asset_name)
        rs_out = rs_mat.children()[0]
        rs_out.setName('rs_out')

        rs_material = rs_mat.createNode('redshift::Material')
        rs_material.parm('refl_brdf').set('GGX')
        rs_out.setNamedInput('Surface', rs_material, 'outColor')

        # self.homeToSelectionNodeNetworkEditor(rs_material)

        path = os.path.dirname(preview_img)
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]

                    if format == "jpg" or format == "exr":

                        if texture_size in file_name:
                            if str.lower("Albedo") in str.lower(file_name):
                                Albedo = rs_mat.createNode('redshift::TextureSampler')
                                Albedo.setName(str("Albedo"))
                                Albedo.parm('tex0').set(full_path)
                                rs_cc = Albedo.createOutputNode('redshift::RSColorCorrection')
                                rs_material.setNamedInput('diffuse_color', rs_cc, 'outColor')
                                rs_mat.layoutChildren()
                            if str.lower("Roughness") in str.lower(file_name):
                                Roughness = rs_mat.createNode('redshift::TextureSampler')
                                Roughness.setName("Roughness")
                                Roughness.parm('tex0').set(full_path)
                                rs_ramp = Roughness.createOutputNode('redshift::RSRamp')
                                rs_material.setNamedInput('refl_roughness', rs_ramp, 'outColor')
                                rs_mat.layoutChildren()
                            if str.lower("Normal") in str.lower(file_name):
                                Normal = rs_mat.createNode('redshift::TextureSampler')
                                Normal.setName("Normal")
                                Normal.parm('tex0').set(full_path)
                                rs_bump = Normal.createOutputNode('redshift::BumpMap')
                                rs_bump.parm('inputType').set('Tangent-Space Normal')
                                rs_bump.parm('scale').set(.2)
                                rs_out.setNamedInput('Bump Map', rs_bump, 'out')
                                rs_mat.layoutChildren()
                            if str.lower("Displacement") in str.lower(file_name) and format == "exr":
                                Displacement = rs_mat.createNode('redshift::TextureSampler')
                                Displacement.setName("Displacement")
                                Displacement.parm('tex0').set(full_path)
                                rs_displac = Displacement.createOutputNode('redshift::Displacement')
                                rs_displac.parm('scale').set(.1)
                                rs_displac.parm('newrange_min').set(-.5)
                                rs_displac.parm('newrange_max').set(.5)
                                rs_out.setNamedInput('Displacement', rs_displac, 'out')
                                rs_mat.layoutChildren()
                            if str.lower("Opacity") in str.lower(file_name):
                                Opacity = rs_mat.createNode('redshift::Sprite')
                                Opacity.parm('tex0').set(full_path)
                                Opacity.setNamedInput('input', rs_material, 'outColor')
                                rs_out.setNamedInput('Surface', Opacity, 'outColor')
                                rs_mat.layoutChildren()

                            if str.lower("Translucency") in str.lower(file_name):
                                Translucency = rs_mat.createNode('redshift::TextureSampler')
                                Translucency.setName("Translucency")
                                Translucency.parm('tex0').set(full_path)
                                rs_material.setNamedInput('transl_color', Translucency, 'outColor')
                                rs_mat.layoutChildren()


                            if str.lower("Specular") in str.lower(file_name):
                                Specular = rs_mat.createNode('redshift::TextureSampler')
                                Specular.setName("Specular")
                                Specular.parm('tex0').set(full_path)
                                rs_material.setNamedInput('refl_color', Specular, 'outColor')
                                rs_mat.layoutChildren()


                            if str.lower("Brush") in str.lower(file_name):
                                Brush = rs_mat.createNode('redshift::TextureSampler')
                                Brush.setName("Brush")
                                Brush.parm('tex0').set(full_path)
                                # rs_material.setNamedInput('refl_color', Specular, 'outColor')
                                rs_mat.layoutChildren()

        self.homeToSelectionNodeNetworkEditor(rs_mat)

    def LOD0_Check(self, full_path):
        if self.enableLodsRadio.checkState():
            return True
        else:
            return 'LOD0' in str(full_path)




    def load3DModle(self, geo_node, asset_name, preview_img, switch):
        import_fbx, import_abc, import_obj = self.fbxAbcObjPriority(preview_img)
        path = os.path.dirname(preview_img)
        count = 0




        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\','/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)

                    file_name = base_name.split('.')[0]
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]

                    LOD_Check = self.LOD0_Check(full_path)

                    if format in ['fbx', 'abc', 'obj'] and LOD_Check:
                        if format == 'abc' and import_abc:
                            file_node = geo_node.createNode('alembic')
                            file_path_parm = file_node.parm('fileName').set(full_path)
                            file_node.parm('loadmode').set(1)
                            file_node.parm('polysoup').set(0)
                            file_node.parm('groupnames').set(4)
                            count += 1
                        if format == 'fbx' and import_fbx:
                            file_node = geo_node.createNode('file')
                            file_path_parm = file_node.parm('file').set(full_path)
                            count += 1

                        if format == 'obj' and import_obj:
                            file_node = geo_node.createNode('file')
                            file_path_parm = file_node.parm('file').set(full_path)
                            count += 1
                        if count:
                            trans = file_node.createOutputNode('xform')
                            trans.parm('scale').set(.01)

                            att_del = trans.createOutputNode('attribdelete')
                            att_del.parm('ptdel').set('fbx_*')
                            att_del.parm('vtxdel').set('Alpha Cd')

                            mat = att_del.createOutputNode('material')
                            mat_path = '/obj/matnet1/' + str(asset_name)
                            mat.parm('shop_materialpath1').set(mat_path)

                            null = mat.createOutputNode('null')
                            null_name = 'OUT_' + file_name
                            null.setName(null_name)
                            switch.setNextInput(null)


    def createAtlasGeo(self, asset_name, preview_img):
        geo_node = hou.node('/obj/').createNode('geo')
        obj = hou.node('/obj/')
        count = 0
        for child in obj.children():
            if asset_name in child.name():
                count += 1
        if count:
            asset_name = asset_name + str(count)

        geo_node.setName(asset_name)

        atlas_splitter = geo_node.createNode('quixel_atlas_splitter')

        path = os.path.dirname(preview_img)


        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    # dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)
                    file_name = str(base_name.split('.')[0])
                    format = base_name.split('.')[1]
                    # lod = file_name.split('_')[-1]
                    if format == "jpg" and str.lower("Opacity") in str.lower(file_name) and 'Thumbs' not in str(full_path):
                        atlas_splitter.parm('filename').set(str(full_path))

                    if format == "jpg" or format == "exr":

                        if '2K' in file_name:
                            if str.lower("Albedo") in str.lower(file_name):
                                Albedo_map_path = full_path

        mat = atlas_splitter.createOutputNode('material')
        mat_path = '/obj/matnet1/' + str(asset_name)
        mat.parm('shop_materialpath1').set(mat_path)

        null = mat.createOutputNode('null')
        null_name = 'OUT_' + str(asset_name)
        null.setName(null_name)

        # out_null = switch.createOutputNode('null')
        uvquickshade = null.createOutputNode('uvquickshade')
        uvquickshade.parm('texture').set(Albedo_map_path)
        out_display = uvquickshade.createOutputNode('null')
        out_display.setName('OUT_display_tex')






        geo = null.geometry()
        name = geo.primStringAttribValues('name')
        new_name = list(set(name))
        new_name.sort(key=name.index)

        for item in new_name:
            blast = null.createOutputNode('blast')
            group = '@name' + '=' + str(item)
            blast.parm('group').set(group)
            blast.parm('negate').set(1)
            out_piece = blast.createOutputNode('null')
            out_piece.setName(str(item))

        null.setRenderFlag(1)
        out_display.setDisplayFlag(1)
        sceneViewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)
        sceneViewer.setCurrentNode(geo_node, True)
        sceneViewer.curViewport().homeSelected()

        if self.renderBoxInput.currentText() == 'Mantra':
            Albedo_map_path = self.createMantraShader(asset_name, preview_img)

        if self.renderBoxInput.currentText() == 'Redshift':
            self.createSurfaceShader(asset_name, preview_img)



    def textureSizePriority(self,preview_img):

        path = os.path.dirname(preview_img)
        size_2k_count = 0
        size_4k_count = 0

        select_size = self.textureSizeBoxList.currentText()
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')
                full_path = root_path
                if 'Billboard' not in str(full_path) and 'Thumbs' not in str(full_path):
                    dir_name = os.path.dirname(full_path)
                    base_name = os.path.basename(full_path)
                    file_name = str(base_name.split('.')[0])

                    if '2K' in file_name:
                        size_2k_count +=1


                    if '4K' in file_name:
                        size_4k_count +=1

        if size_2k_count and  size_4k_count == 0 :
            texture_size = '2K'

        if size_2k_count == 0 and size_4k_count:
            texture_size = '2K'

        if size_2k_count and size_4k_count:
            texture_size = select_size

        return texture_size





    def fbxAbcObjPriority(self,preview_img):
        path = os.path.dirname(preview_img)
        fbx_count = 0
        abc_count = 0
        obj_count = 0
        # print preview_img
        import_fbx = False
        import_abc = False
        import_obj = False
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')
                full_path = root_path
                if os.path.isfile(full_path) and 'previews' not in str(full_path):
                    dir_name = os.path.dirname(full_path)
                    # parent_folder = os.path.basename(dir_name)
                    base_name = os.path.basename(full_path)
                    file_name = str(base_name.split('.')[0])
                    format = str(base_name.split('.')[1])
                    # lod = file_name.split('_')[-1]

                    if str.lower(format) == "fbx":
                        fbx_count += 1
                        # print '_________________________________________fbx____________________________________'
                        # print fbx_count
                        # print full_path
                    if str.lower(format) == "abc":
                        abc_count += 1
                        # print '_________________________________________abc____________________________________'
                        # print abc_count
                        # print full_path

                    if str.lower(format) == "obj":
                        obj_count += 1

        if fbx_count:
            import_fbx = True
            import_abc = False
            import_obj = False

        if abc_count:
            import_fbx = False
            import_abc = True
            import_obj = False

        if obj_count:
            import_fbx = False
            import_abc = False
            import_obj = True
        # print fbx_count, abc_count, obj_count
        return import_fbx, import_abc, import_obj



    def AlbedoTexPath(self, path,preview_img):

        texture_size = self.textureSizePriority(preview_img)
        Albedo_map_path = ''
        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    parent_folder = os.path.basename(dir_name)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]

                    if format == "jpg" or format == "exr":

                        if texture_size in file_name and 'Billboard' not in str(full_path):
                            if str.lower("Albedo") in str.lower(file_name):
                                Albedo_map_path = full_path


        return Albedo_map_path




    def load3dPlanteGeo(self, geo_node, asset_name, preview_img):

        import_fbx, import_abc, import_obj = self.fbxAbcObjPriority(preview_img)
        path = os.path.dirname(preview_img)

        Albedo_map_path = self.AlbedoTexPath(path,preview_img)

        for root, dirs, files in os.walk(path, topdown=False):

            for name in files:
                root_path = os.path.join(root, name)
                root_path = root_path.replace('\\', '/')

                full_path = root_path

                if os.path.isfile(full_path):
                    dir_name = os.path.dirname(full_path)
                    parent_folder = os.path.basename(dir_name)
                    base_name = os.path.basename(full_path)

                    file_name = str(base_name.split('.')[0])
                    format = base_name.split('.')[1]
                    lod = file_name.split('_')[-1]

                    # if format == "jpg" or format == "exr":
                    #
                    #     if '2K' in file_name and 'Billboard' not in str(full_path):
                    #         if str.lower("Albedo") in str.lower(file_name):
                    #             Albedo_map_path = full_path

                    count = 0
                    LOD_Check = self.LOD0_Check(full_path)

                    if format in ['fbx', 'abc', 'obj'] and 'previews' not in str(full_path) and LOD_Check :

                        if len(geo_node.children()) == 0:
                            var_node = geo_node.createNode('geo')
                            var_node.setName(str(parent_folder))
                            switch = var_node.createNode('switch')
                            out_null = switch.createOutputNode('null')
                            uvquickshade = switch.createOutputNode('uvquickshade')
                            uvquickshade.parm('texture').set(Albedo_map_path)
                            out_display = uvquickshade.createOutputNode('null')
                            out_display.setName('OUT_display_tex')
                            out_null.setName('OUT_asset_modle')

                            out_null.setRenderFlag(1)
                            if self.renderBoxInput.currentText() == 'Mantra':
                                switch.setDisplayFlag(1)
                            else:
                                out_display.setDisplayFlag(1)
                        else:
                            for child in geo_node.children():

                                if parent_folder  in child.name():
                                    count +=1

                            if count == 0:
                                var_node = geo_node.createNode('geo')
                                # print parent_folder
                                var_node.setName(str(parent_folder))
                                switch = var_node.createNode('switch')
                                out_null = switch.createOutputNode('null')
                                uvquickshade = switch.createOutputNode('uvquickshade')
                                uvquickshade.parm('texture').set(Albedo_map_path)
                                out_display = uvquickshade.createOutputNode('null')
                                out_display.setName('OUT_display_tex')
                                out_null.setName('OUT_asset_modle')

                                out_null.setRenderFlag(1)
                                if self.renderBoxInput.currentText() == 'Mantra':
                                    switch.setDisplayFlag(1)
                                else:
                                    out_display.setDisplayFlag(1)


                        if format == 'abc' and import_abc:
                            file_node = var_node.createNode('alembic')
                            file_node.parm('fileName').set(full_path)
                            file_node.parm('loadmode').set(1)
                            file_node.parm('polysoup').set(0)
                            file_node.parm('groupnames').set(4)
                            self.insideLoopNode(file_node,asset_name, file_name, switch ,var_node)

                        if format == 'fbx' and import_fbx:
                            file_node = var_node.createNode('file')
                            file_node.parm('file').set(full_path)
                            self.insideLoopNode(file_node, asset_name, file_name, switch, var_node)

                        if format == 'obj' and import_obj:
                            file_node = var_node.createNode('file')
                            file_node.parm('file').set(full_path)
                            self.insideLoopNode(file_node, asset_name, file_name, switch, var_node)



    def insideLoopNode(self, file_node,asset_name, file_name, switch ,var_node):
        trans = file_node.createOutputNode('xform')
        trans.parm('scale').set(.01)
        att_del = trans.createOutputNode('attribdelete')
        att_del.parm('ptdel').set('fbx_*')
        att_del.parm('vtxdel').set('Alpha Cd')

        mat = att_del.createOutputNode('material')
        mat_path = '/obj/matnet1/' + str(asset_name)
        mat.parm('shop_materialpath1').set(mat_path)

        if self.enableMotionCheck.checkState():

            motion = mat.createOutputNode('quixel_simple_motion')
            null = motion.createOutputNode('null')
        else:
            null = mat.createOutputNode('null')
        null_name = 'OUT_' + file_name
        null.setName(null_name)
        switch.setNextInput(null)
        var_node.layoutChildren()



    def creat3dPlanteAsset(self, asset_name, preview_img):
        geo_node = hou.node('/obj/').createNode('subnet')
        obj = hou.node('/obj/')
        count = 0
        for child in obj.children():
            if asset_name in child.name():
                count+=1
        if count:
            asset_name = asset_name + str(count)

        geo_node.setName(asset_name)

        # switch = geo_node.createNode('switch')
        Albedo_map_path = ''

        self.load3dPlanteGeo(geo_node, asset_name, preview_img)

        if self.renderBoxInput.currentText() == 'Mantra':
            if self.materialBoxList.currentText() == 'Principled Shader':
                Albedo_map_path = self.createMantraShader(asset_name, preview_img)
            # createMantraShader
            if self.materialBoxList.currentText() == 'Triplanar':
                Albedo_map_path = self.createMantraTriplanarShader(asset_name, preview_img)

        if self.renderBoxInput.currentText() == 'Redshift':
            if self.materialBoxList.currentText() == 'Redshift Textures':
                self.createSurfaceShader(asset_name, preview_img)

            if self.materialBoxList.currentText() == 'Redshift Triplanar':
                Albedo_map_path = self.createRSTriplanarShader(asset_name, preview_img)



        geo_node.layoutChildren()

        sceneViewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)
        sceneViewer.setCurrentNode(geo_node, True)
        sceneViewer.curViewport().homeSelected()



    def creatAsset(self, asset_name, preview_img):
        geo_node = hou.node('/obj/').createNode('geo')
        obj = hou.node('/obj/')
        count = 0
        for child in obj.children():
            if asset_name in child.name():
                count+=1
        if count:
            asset_name = asset_name + str(count)

        geo_node.setName(asset_name)

        switch = geo_node.createNode('switch')
        Albedo_map_path = ''
        self.load3DModle(geo_node, asset_name, preview_img, switch)


        if self.renderBoxInput.currentText() == 'Mantra':
            if self.materialBoxList.currentText() == 'Principled Shader':
                Albedo_map_path = self.createMantraShader(asset_name, preview_img)
            # createMantraShader
            if self.materialBoxList.currentText() == 'Triplanar':
                Albedo_map_path = self.createMantraTriplanarShader(asset_name, preview_img)

        if self.renderBoxInput.currentText() == 'Redshift':
            if self.materialBoxList.currentText() == 'Redshift Textures':
                Albedo_map_path = self.createShader(asset_name, preview_img)

            if self.materialBoxList.currentText() == 'Redshift Triplanar':
                Albedo_map_path = self.createRSTriplanarShader(asset_name, preview_img)

        # "Redshift Textures", "Redshift Triplanar"  "Principled Shader", "Triplanar"
        out_null = switch.createOutputNode('null')
        uvquickshade = switch.createOutputNode('uvquickshade')
        uvquickshade.parm('texture').set(Albedo_map_path)
        out_display = uvquickshade.createOutputNode('null')
        out_display.setName('OUT_display_tex')

        out_null.setName('OUT_asset_modle')
        out_null.setRenderFlag(1)
        if self.renderBoxInput.currentText() == 'Mantra':
            switch.setDisplayFlag(1)
        else:
            out_display.setDisplayFlag(1)

        sceneViewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)
        sceneViewer.setCurrentNode(geo_node, True)
        sceneViewer.curViewport().homeSelected()

        geo_node.layoutChildren()

    def homeSelectedSceneViewer(self, node):
        sceneViewer = hou.ui.paneTabOfType(hou.paneTabType.SceneViewer)
        sceneViewer.setCurrentNode(node, True)
        sceneViewer.curViewport().homeSelected()

    def homeToSelectionNodeNetworkEditor(self, node):
        nw = hou.paneTabType.NetworkEditor
        ui_pane = hou.ui.paneTabOfType(nw)
        ui_pane.setCurrentNode(node, True)
        ui_pane.homeToSelection()


    def importAsset(self):
        item = self.sender()
        preview_img = item.property('img_path')
        index = self.preview_img_list.index(preview_img)
        #
        # Cursor_pos = QCursor.pos()
        # print Cursor_pos
        # print self.childAt(Cursor_pos)
        # print self.tab_wdg.childAt(Cursor_pos)

        asset_type = self.asset_type_list[index]
        asset_name = self.asset_name_list[index]

        if asset_type == '3D asset':
            self.creatAsset(asset_name, preview_img)

        if asset_type == '3D plant':
            self.creat3dPlanteAsset(asset_name, preview_img)


        if asset_type == 'surface':

            if self.renderBoxInput.currentText() == 'Mantra':
                if self.materialBoxList.currentText() == 'Principled Shader':
                    Albedo_map_path = self.createMantraShader(asset_name, preview_img)
                # createMantraShader
                if self.materialBoxList.currentText() == 'Triplanar':
                    Albedo_map_path = self.createMantraTriplanarShader(asset_name, preview_img)

            if self.renderBoxInput.currentText() == 'Redshift':
                if self.materialBoxList.currentText() == 'Redshift Textures':
                    self.createSurfaceShader(asset_name, preview_img)

                if self.materialBoxList.currentText() == 'Redshift Triplanar':
                    Albedo_map_path = self.createRSTriplanarShader(asset_name, preview_img)




        if asset_type == 'decal':
            if self.useAtlasSplitterRadio.checkState():
                self.createAtlasGeo(asset_name, preview_img)
            else:
                if self.renderBoxInput.currentText() == 'Mantra':
                    Albedo_map_path = self.createMantraShader(asset_name, preview_img)

                if self.renderBoxInput.currentText() == 'Redshift':
                    self.createSurfaceShader(asset_name, preview_img)


        if asset_type == 'atlas':
            self.createAtlasGeo(asset_name, preview_img)



        if asset_type == 'imperfection':

            if self.renderBoxInput.currentText() == 'Mantra':
                if self.materialBoxList.currentText() == 'Principled Shader':
                    Albedo_map_path = self.createMantraShader(asset_name, preview_img)
                # createMantraShader
                if self.materialBoxList.currentText() == 'Triplanar':
                    Albedo_map_path = self.createMantraTriplanarShader(asset_name, preview_img)

            if self.renderBoxInput.currentText() == 'Redshift':
                if self.materialBoxList.currentText() == 'Redshift Textures':
                    self.createImperfectionShader(asset_name, preview_img)

                if self.materialBoxList.currentText() == 'Redshift Triplanar':
                    Albedo_map_path = self.createRSTriplanarShader(asset_name, preview_img)



        if asset_type == 'displacement':

            if self.renderBoxInput.currentText() == 'Mantra':
                if self.materialBoxList.currentText() == 'Principled Shader':
                    Albedo_map_path = self.createMantraShader(asset_name, preview_img)
                # createMantraShader
                if self.materialBoxList.currentText() == 'Triplanar':
                    Albedo_map_path = self.createMantraTriplanarShader(asset_name, preview_img)

            if self.renderBoxInput.currentText() == 'Redshift':
                if self.materialBoxList.currentText() == 'Redshift Textures':
                    self.createImperfectionShader(asset_name, preview_img)

                if self.materialBoxList.currentText() == 'Redshift Triplanar':
                    Albedo_map_path = self.createRSTriplanarShader(asset_name, preview_img)



        if asset_type == 'brush':
            if self.renderBoxInput.currentText() == 'Mantra':
                Albedo_map_path = self.createMantraShader(asset_name, preview_img)

            if self.renderBoxInput.currentText() == 'Redshift':
                self.createImperfectionShader(asset_name, preview_img)






        # if asset_type == '3d'
        # 3D asset  3D plant  atlas  decal  displacement  surface  imperfection  brush

    # def imgViewClear(self, img_view):
    #     count = img_view.count()
    #     if count:
    #         for i in range(count):
    #             # img_view.takeAt(count+i)
    #             img_view.pop()
    #             print img_view.count()


    def imgViewSize(self,icon_size, img_view):
        count = img_view.count()
        if count:
            for i in range(count):
                item = img_view.itemAt(i).widget()
                item.setFixedSize(icon_size, icon_size)
                item.setIconSize(QSize(icon_size - 40, icon_size - 40))

    def setAllImgViewSize(self):
        icon_size = self.slider.value()
        self.slider.setToolTip(str(self.slider.value()))
        img_view_list = [self.asset_3d_img_view, self.asset_3D_Plants_img_view, self.asset_Atlases_img_view,
                         self.asset_Decals_img_view, self.asset_Surfaces_img_view, self.asset_Displacements_img_view,
                         self.asset_Imperfections_img_view, self.asset_Brushes_img_view]

        for img_view in img_view_list:
            self.imgViewSize(icon_size, img_view)



    def deletQToolButton(self, img_view):

        # qt_tool = QToolButton()
        # qt_tool.deleteLater()
        # qt_tool.destroy()
        # qt_tool

        count = img_view.count()
        if count:
            for i in range(count):
                item = img_view.itemAt(i).widget()
                item.deleteLater()
                # item.destroy()



    def  deletALLQToolButton(self):
        img_view_list = [self.asset_3d_img_view, self.asset_3D_Plants_img_view, self.asset_Atlases_img_view,
                         self.asset_Decals_img_view, self.asset_Surfaces_img_view, self.asset_Displacements_img_view,
                         self.asset_Imperfections_img_view, self.asset_Brushes_img_view]

        for img_view in img_view_list:
            self.deletQToolButton(img_view)




    def updateList(self):

        self.deletALLQToolButton()
        self.initList()
        items_len = len(self.preview_img_list)

        for i in range(items_len):
            preview_img = self.preview_img_list[i]
            asset_type = self.asset_type_list[i]
            asset_name = self.asset_name_list[i]
            if asset_type == '3D asset':
                self.addWdgList(i, preview_img, asset_name, self.asset_3d_img_view)

            if asset_type == '3D plant':
                self.addWdgList(i, preview_img, asset_name,self.asset_3D_Plants_img_view)

            if asset_type == 'surface':
                self.addWdgList(i, preview_img, asset_name, self.asset_Surfaces_img_view)

            if asset_type == 'decal':
                self.addWdgList(i, preview_img, asset_name, self.asset_Decals_img_view)

            if asset_type == 'atlas':
                self.addWdgList(i, preview_img, asset_name, self.asset_Atlases_img_view)

            if asset_type == 'imperfection':
                self.addWdgList(i, preview_img, asset_name, self.asset_Imperfections_img_view)

            if asset_type == 'displacement':
                self.addWdgList(i, preview_img, asset_name, self.asset_Displacements_img_view)

            if asset_type == 'brush':
                self.addWdgList(i, preview_img, asset_name, self.asset_Brushes_img_view)

        # 3D asset  3D plant  atlas  decal  displacement  surface  imperfection  brush



    def readQssFile(self, filePath):
        with open(filePath, 'r') as fileObj:
            styleSheet = fileObj.read()
        return styleSheet


    def custom_right_menu(self,pos):
        self.contextMenu = QMenu()
        self.actionA = self.contextMenu.addAction('打开文件夹')
        # self.actionB = self.contextMenu.addAction('用Nuke打开渲染序列')
        # self.contextMenu.move(self.mapToParent(pos))
        self.contextMenu.move(QCursor().pos())
        self.contextMenu.show()
        self.actionA.triggered.connect(self.actionHandler)

    def actionHandler(self):

        if self.sender() == self.actionA:
            # Cursor_pos = QCursor.pos()
            # print self.childAt(Cursor_pos)

            cru_wdg = self.focusWidget()
            # if cru_wdg:
            #     if cru_wdg.inherits('QToolButton'):
            #         img_path = cru_wdg.property('img_path')
            #         self.openFilePath(img_path)
            #         print 'find QToolButton'
            #
            #     else:
            #         cru_wdg = cru_wdg.widget().focusWidget()
            #         if cru_wdg:
            #             img_path = cru_wdg.property('img_path')
            #             self.openFilePath(img_path)
            #             print 'find Widget'


            # temp_t =QToolButton()
            # print self.mouseGrabber()
            # # print self.
            # # print type(temp_t).text()

            #     # print json_path
            # else:
            #     print '请重新在不是空白的区域右键'

    def openFilePath(self, img_path):
        split_path = [x for x in re.split(r'[/\\]\s*', img_path) if x]
        file_name = split_path[-1]
        base_path = img_path.replace(file_name, '')
        os.startfile(base_path)


    def writeSettings(self):
        settings = QSettings(self.script_path + '/config.ini', QSettings.IniFormat)

        # tem = QVariant(self.useAtlasSplitterRadio.checkState())


        settings.setValue('Megascans_Asset_path',self.lineTxet.text())
        settings.setValue('Renderer',self.renderBoxInput.currentText())
        settings.setValue('Material_Type',self.materialBoxList.currentText())
        settings.setValue('Texture_Size',self.textureSizeBoxList.currentText())
        settings.setValue('Use_Atlas_Splitter',self.useAtlasSplitterRadio.checkState())
        settings.setValue('Enable_Lods',self.enableLodsRadio.checkState())
        settings.setValue('Enable_Motion',self.enableMotionCheck.checkState())
        settings.setValue('Icon_Size',self.slider.value())
        settings.sync()


        # print settings.fileName()
        # print type(True)
        # print QVariant(self.slider.value()).Int
        # print self.slider.value()




    def readSettings(self):
        settings = QSettings(self.script_path + '/config.ini', QSettings.IniFormat)

        if  os.path.isfile(settings.fileName()):

            self.lineTxet.setText(settings.value('Megascans_Asset_path'))
            self.renderBoxInput.setCurrentText(settings.value('Renderer'))
            self.materialBoxList.setCurrentText(settings.value('Material_Type'))
            self.textureSizeBoxList.setCurrentText(settings.value('Texture_Size'))
            self.useAtlasSplitterRadio.setChecked(bool(int(settings.value('Use_Atlas_Splitter'))))
            self.enableLodsRadio.setChecked(bool(int(settings.value('Enable_Lods'))))
            self.enableMotionCheck.setChecked(bool(int(settings.value('Enable_Motion'))))
            self.slider.setValue(int(settings.value('Icon_Size',200)))
            #
            # print settings.value('Use_Atlas_Splitter')
            # print type(settings.value('Use_Atlas_Splitter'))
            # print bool(settings.value('Use_Atlas_Splitter'))

    def closeWin(self):
        # self.writeSettings()
        self.close()




if __name__ =='__main__':
    app = QApplication(sys.argv)
    mainWin = Megascans_Asset_Importer()
    mainWin.show()
    sys.exit(app.exec_())
